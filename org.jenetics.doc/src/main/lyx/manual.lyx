#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\begin_preamble
\usepackage{ifpdf} % part of the hyperref bundle
\ifpdf % if pdflatex is used

 % set fonts for nicer pdf view
 \IfFileExists{lmodern.sty}{\usepackage{lmodern}}{}

\fi % end if pdflatex is used

\usepackage{listings}
%\usepackage{listingsutf8}
\usepackage{color}
\usepackage{url}
\usepackage[usenames,dvipsnames]{xcolor}
\usepackage{cclicenses}
\usepackage{multicol}
\usepackage{changepage}
\usepackage{newunicodechar}

\definecolor{dkgreen}{rgb}{0,0.6,0}
\definecolor{gray}{rgb}{0.3,0.3,0.3}
\definecolor{mauve}{rgb}{0.58,0,0.82}
\definecolor{keyword}{rgb}{0.5,0,0.5}
%\definecolor{background}{rgb}{0.96,0.96,0.96}
\definecolor{background}{rgb}{0.8984,0.9492,1.0}
\definecolor{white}{rgb}{1.0,1.0,1.0}
%\definecolor{covercolor}{RGB}{220,220,220}
%\definecolor{covercolor}{RGB}{25,200,255}
%\definecolor{covercolor}{RGB}{202,232,255}
%\definecolor{covercolor}{rgb}{0.00,0.27,0.40}
\definecolor{covercolor}{rgb}{0.34,0.55,0.66}

\newunicodechar{Σ}{\lstsum}

\lstset{
  language=java,
  basicstyle=\footnotesize,
  numbers=left,
  numberstyle=\footnotesize,
  stepnumber=1,
  numbersep=6pt,
  rulesep=5pt,
  backgroundcolor=\color{background},
  showspaces=false,
  showstringspaces=false,
  showtabs=false,
  frame=single,
  frameshape={}{nny}{nny}{},
  %framexleftmargin=8pt,
  tabsize=4,
  captionpos=b,
  breaklines=true,
  breakatwhitespace=false,
  %title=\lstname,
  numberstyle=\tiny\color{gray},
  keywordstyle=\color{keyword}\bfseries,
  commentstyle=\color{dkgreen},
  stringstyle=\color{mauve},
  escapeinside={\%*}{*)},
  morekeywords={*,...,public,extends}
}
\end_preamble
\options utf8,utf8x
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format pdf2
\output_sync 0
\bibtex_command bibtex
\index_command default
\float_placement h
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_title "Jenetics"
\pdf_author "Franz Wilhelmstötter"
\pdf_subject "Genetic Algorithm"
\pdf_keywords "Research, Artificial Intelligence, Bio-Informatics, evolutionaryalgorithm, optimization, geneticalgorithm, parallelized, algorithms, evolutionary, artificialintelligence, heuristicalgorithm"
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize a4paper
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\boxbgcolor #ffffff
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language danish
\papercolumns 1
\papersides 1
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict true
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pagecolor{covercolor}
\end_layout

\begin_layout Plain Layout


\backslash
begin{adjustwidth*}{-4.5cm}{-4.5cm}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename ../resources/graphic/Jenetics.png
	lyxscale 60
	height 20mm

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace 0.5cm
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset CommandInset line
LatexCommand rule
offset "0page%"
width "100page%"
height "10pt"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace 0.3cm
\end_inset


\end_layout

\begin_layout Standard
\align right

\family sans
\size huge
\color black
LIBRARY USER'S MANUAL
\size large
\noun on
\color inherit

\begin_inset space \hspace{}
\length 1.5cm
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename ../resources/graphic/title.png
	lyxscale 50
	height 47pheight%

\end_inset


\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset CommandInset line
LatexCommand rule
offset "0page%"
width "100page%"
height "2pt"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace 0.2cm
\end_inset


\end_layout

\begin_layout Standard
\align right

\family sans
\size large
\noun on
\begin_inset space \hspace{}
\length 2.5cm
\end_inset


\size default
\noun default
FRANZ WILHELMSTÖTTER
\series bold
\noun on

\begin_inset space \hfill{}
\end_inset


\series default
\noun default
VERSION 3
\size large
\noun on

\begin_inset space \hspace{}
\length 1.5cm
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{adjustwidth*}
\end_layout

\begin_layout Plain Layout


\backslash
thispagestyle{empty}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pagecolor{white}
\end_layout

\begin_layout Plain Layout


\backslash
thispagestyle{empty}
\end_layout

\begin_layout Plain Layout


\backslash
pagenumbering{roman}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace 2cm
\end_inset


\end_layout

\begin_layout Standard
\noindent

\size small
Franz Wilhelmstötter
\end_layout

\begin_layout Standard
\noindent

\family typewriter
\begin_inset CommandInset href
LatexCommand href
name "franz.wilhelmstoetter@gmx.at"
target "franz.wilhelmstoetter@gmx.at"
type "mailto:"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Phantom VPhantom
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://sourceforge.net/projects/jenetics
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://bitbucket.org/fwilhelm/jenetics
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace 1cm
\end_inset


\end_layout

\begin_layout Standard
\noindent
\align left

\size small
@__identifier__@
\end_layout

\begin_layout Standard
\begin_inset VSpace vfill*
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename ../resources/graphic/by-sa.svg

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center

\size footnotesize
This work is licensed under a 
\begin_inset CommandInset href
LatexCommand href
name "Creative Commons"
target "http://creativecommons.org/licenses/by-sa/3.0/at/"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
License
\end_layout

\end_inset

 Attribution-ShareAlike 3.0 Austria License.
 To view a copy of this license, visit
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://creativecommons.org/licenses/by-sa/3.0/at/
\end_layout

\end_inset

 or send a letter to Creative Commons, 444 Castro Street, Suite 900, Mountain
 View, California, 94041, USA.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Abstract

\family sans
\series bold
\shape smallcaps
Jenetics
\family default
\series default
\shape default
 is an
\series bold
 Genetic Algorithm
\series default
 and/or
\series bold
 Evolutionary Algorithm
\series default
 library respectively written in Java.
 It is designed with a clear separation of the several algorithm concepts,
 e.
\begin_inset space ~
\end_inset

g.

\family typewriter
 Gene
\family default
,
\family typewriter
 Chromosome
\family default
,
\family typewriter
 Genotype
\family default
,
\family typewriter
 Phenotype
\family default
,
\family typewriter
 Population
\family default
 and fitness
\family typewriter
 Function
\family default
.

\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 allows you to minimize or maximize the given fitness function without tweaking
 it.
 In contrast to other GA implementations, the library uses the concept of
 an evolution 
\emph on
stream
\emph default
 (
\family typewriter
Evolution\SpecialChar \-
Stream
\family default
) for executing the evolution steps.
 Since the 
\family typewriter
Evolution\SpecialChar \-
Stream
\family default
 implements the Java 
\family typewriter
Stream
\family default
 interface, it works smoothly with the rest of the Java streaming API.
 This manual describes the concepts implemented in the
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 project and gives you examples and best practice tips.
\end_layout

\begin_layout Standard
\noindent
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FloatList figure

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pagenumbering{arabic}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard

\family sans
\series bold
\shape smallcaps
Jenetics
\family default
\series default
\shape default
 is a library, written in Java
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
The library is build with and depends on Java SE 8:
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://www.oracle.com/technetwork/java/javase/downloads/index.html
\end_layout

\end_inset


\end_layout

\end_inset

, which provides an 
\begin_inset CommandInset href
LatexCommand href
name "genetic algorithm"
target "http://en.wikipedia.org/wiki/Genetic_algorithm"

\end_inset

 (GA) implementation.
 It has no runtime dependencies to other libraries, except the Java 8 runtime.
 Since the library is available on maven central repository
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
If you are using Gradle, you can use the following dependency string: 
\family typewriter
'org.bitbucket.fwilhelm:\SpecialChar \-
org.jenetics:\SpecialChar \-
3.0.0'
\family default
.
\end_layout

\end_inset

, it can be easily integrated into existing projects.
 The very clear structuring of the different parts of the GA allows an easy
 adaption for different problem domains.
\end_layout

\begin_layout Standard
\begin_inset Box Shaded
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "90col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Plain Layout

\family sans
This manual is not an introduction or a tutorial for genetic and/or evolutionary
 algorithms in general.
 It is assumed that the reader has a knowledge about the structure and the
 functionality of genetic algorithms.
 Good introductions to GAs can be found in
\begin_inset CommandInset citation
LatexCommand cite
key "Sivanandam2010"

\end_inset

,
\begin_inset CommandInset citation
LatexCommand cite
key "michalewicz1996genetic"

\end_inset

,
\begin_inset CommandInset citation
LatexCommand cite
key "Shiffman2012"

\end_inset

 or
\begin_inset CommandInset citation
LatexCommand cite
key "Whitley94agenetic"

\end_inset

.
\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
To give a first impression of the library usage, lets start with a simple
 
\begin_inset Quotes ald
\end_inset

Hello World
\begin_inset Quotes ard
\end_inset

 program.
 This first example implements the well known bit-counting problem.
\begin_inset listings
lstparams "extendedchars=true,language=Java,numbers=left,stepnumber=1,tabsize=4"
inline false
status open

\begin_layout Plain Layout

import org.jenetics.BitChromosome; 
\end_layout

\begin_layout Plain Layout

import org.jenetics.BitGene;
\end_layout

\begin_layout Plain Layout

import org.jenetics.Genotype; 
\end_layout

\begin_layout Plain Layout

import org.jenetics.engine.Engine;
\end_layout

\begin_layout Plain Layout

import org.jenetics.engine.EvolutionResult;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public class HelloWorld {
\end_layout

\begin_layout Plain Layout

    // 2.) Definition of the fitness function.
\end_layout

\begin_layout Plain Layout

    private static Integer eval(Genotype<BitGene> gt) {
\end_layout

\begin_layout Plain Layout

        return ((BitChromosome)gt.getChromosome()).bitCount();
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    public static void main(String[] args) {
\end_layout

\begin_layout Plain Layout

        // 1.) Define the genotype (factory) suitable 
\end_layout

\begin_layout Plain Layout

        //     for the problem.
\end_layout

\begin_layout Plain Layout

        Factory<Genotype<BitGene>> gtf = 
\end_layout

\begin_layout Plain Layout

            Genotype.of(BitChromosome.of(10, 0.5));
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        // 3.) Create the execution environment.
\end_layout

\begin_layout Plain Layout

        Engine<BitGene, Integer> engine = Engine
\end_layout

\begin_layout Plain Layout

            .builder(HelloWorld::eval, gtf)
\end_layout

\begin_layout Plain Layout

            .build();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        // 4.) Start the execution (evolution) and 
\end_layout

\begin_layout Plain Layout

        //     collect the result.
\end_layout

\begin_layout Plain Layout

        Genotype<BitGene> result = engine.stream()
\end_layout

\begin_layout Plain Layout

            .limit(100)
\end_layout

\begin_layout Plain Layout

            .collect(EvolutionResult.toBestGenotype());
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

        System.out.println("Hello World:
\backslash
n" + result);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Hello-World-GA"

\end_inset


\begin_inset Quotes ald
\end_inset

Hello World
\begin_inset Quotes ard
\end_inset

 GA
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In contrast to other GA implementations, the library uses the concept of
 an evolution 
\emph on
stream
\emph default
 (
\family typewriter
Evolution\SpecialChar \-
Stream
\family default
) for executing the evolution steps.
 Since the 
\family typewriter
Evolution\SpecialChar \-
Stream
\family default
 implements the Java 
\family typewriter
Stream
\family default
 interface, it works smoothly with the rest of the Java streaming API.
 Now let's have a closer look at listing 
\begin_inset CommandInset ref
LatexCommand vref
reference "lis:Hello-World-GA"

\end_inset

 and discuss this simple program step by step: 
\end_layout

\begin_layout Enumerate
The probably most challenging part, when setting up a new evolution 
\family typewriter
Engine
\family default
, is to transform the problem domain into a appropriate 
\family typewriter
Genotype
\family default
 (factory) representation.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Section 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Encoding"

\end_inset

 describes some common problem encodings.
\end_layout

\end_inset

 In our example we want to count the number of 
\emph on
ones
\emph default
 of a 
\family typewriter
BitChromosome
\family default
.
 Since we are counting only the ones of one chromosome, we are adding only
 one 
\family typewriter
BitChromosome
\family default
 to our 
\family typewriter
Genotype
\family default
.
 In general, the Genotype can be created with 1 to 
\begin_inset Formula $n$
\end_inset

 chromosomes.
 For detailed description of the genotype's structure have a look at section
 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Genotype"

\end_inset

.
\end_layout

\begin_layout Enumerate
Once this is done, the fitness function which should be maximized, can be
 defined.
 Utilizing the new language features introduced in Java 8, we simply write
 a private static method, which takes the genotype we defined and calculate
 it's fitness value.
 If we want to use the optimized bit-counting method, 
\family typewriter
bitCount()
\family default
, we have to cast the 
\family typewriter
Chromosome<BitGene>
\family default
 class to the actual used 
\family typewriter
Bit\SpecialChar \-
Chromosome
\family default
 class.
 Since we know for sure that we created the 
\family typewriter
Genotype
\family default
 with a 
\family typewriter
BitChromosome
\family default
, this can be done safely.
 A reference to the
\family typewriter
 eval
\family default
 method is then used as fitness function and passed to the 
\family typewriter
Engine\SpecialChar \-
.build
\family default
 method.
\end_layout

\begin_layout Enumerate
In the third step we are creating the 
\emph on
evolution
\emph default
 
\family typewriter
Engine
\family default
, which is responsible for changing, respectively evolving, a given population.
 The Engine is highly configurable and takes parameters for controlling
 the evolutionary and the computational environment.
 For changing the evolutionary behavior, you can set different alterers
 and selectors (see section 
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Genetic-operators"

\end_inset

).
 By changing the used 
\family typewriter
Executor
\family default
 service, you control the number of threads, the 
\family typewriter
Engine
\family default
 is allowed to use.
 An new 
\family typewriter
Engine
\family default
 instance can only be created via its builder, which is created by calling
 the 
\family typewriter
Engine.builder
\family default
 method.
\end_layout

\begin_layout Enumerate
In the last step, we can create a new 
\family typewriter
Evolution\SpecialChar \-
Stream
\family default
 from our 
\family typewriter
Engine
\family default
.
 The 
\family typewriter
Evolution\SpecialChar \-
Stream
\family default
 is the model or view of the 
\emph on
evolutionary
\emph default
 process.
 It serves as a 
\begin_inset Quotes ald
\end_inset

process handle
\begin_inset Quotes ard
\end_inset

 and also allows you, among other things, to control the termination of
 the evolution.
 In our example, we simply truncate the stream after 100 generations.
 If you don't limit the stream, the 
\family typewriter
Evolution\SpecialChar \-
Stream
\family default
 will not terminate and run forever.
 Since the 
\family typewriter
Evolution\SpecialChar \-
Stream
\family default
 extends the 
\family typewriter
java.\SpecialChar \-
util.\SpecialChar \-
stream.\SpecialChar \-
Stream
\family default
 interface, it integrates smoothly with the rest of the Java streaming API.
 The final result, the best 
\family typewriter
Genotype
\family default
 in our example, is then collected with one of the predefined collectors
 of the 
\family typewriter
EvolutionResult
\family default
 class.
\end_layout

\begin_layout Standard
As the example shows, 
\family sans
\series bold
\shape smallcaps
Jenetics
\family default
\series default
\shape default
 makes heavy use of the 
\family typewriter
Stream
\family default
 and 
\family typewriter
Collector
\family default
 classes in Java 8.
 Also the newly introduced lambda expressions and the functional interfaces
 (SAM types) play an important roll in the library design.
 
\end_layout

\begin_layout Standard
There are many other GA implementations out there and they may slightly
 differ in the order of the single execution steps.
 
\family sans
\series bold
\shape smallcaps
Jenetics
\family default
\series default
\shape default
 uses an classical approach.
 Listing
\begin_inset CommandInset ref
LatexCommand vref
reference "lis:Genetic-algorithm"

\end_inset

 shows the (imperative) pseudo-code of the
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 genetic algorithm steps.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "extendedchars=true,language=C,mathescape=true,numbers=left,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

$P_{0}
\backslash
leftarrow P_{initial}$
\end_layout

\begin_layout Plain Layout

$F(P_{0})$
\end_layout

\begin_layout Plain Layout

while !$finished$ do
\end_layout

\begin_layout Plain Layout

    $g
\backslash
leftarrow g + 1$
\end_layout

\begin_layout Plain Layout

    $S_g
\backslash
leftarrow select_{S}(P_{g - 1})$
\end_layout

\begin_layout Plain Layout

    $O_g
\backslash
leftarrow select_{O}(P_{g - 1})$
\end_layout

\begin_layout Plain Layout

    $O_g
\backslash
leftarrow alter(O_g)$
\end_layout

\begin_layout Plain Layout

    $P_g
\backslash
leftarrow filter[g_i
\backslash
ge g_{max}](S_g) + filter[g_i
\backslash
ge g_{max}](O_g)$
\end_layout

\begin_layout Plain Layout

    $F(P_g)$
\end_layout

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Genetic-algorithm"

\end_inset

Genetic algorithm steps
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Genetic algorithm
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

Line (1) creates the initial population and line (2) calculates the fitness
 value of the individuals.
 The initial population is created implicitly before the first evolution
 step is performed.
 Line (4) increases the generation number and line (5) and (6) selects the
 survivor and the offspring population.
 The offspring/survivor fraction is determined by the
\family typewriter
 offspringFraction
\family default
 property of the 
\family typewriter
Engine\SpecialChar \-
.Builder
\family default
.
 The selected offspring are altered in line (7).
 The next line combines the survivor population and the altered offspring
 population---after removing the
\shape italic
 died
\shape default
 individuals---to the new population.
 The steps from line (4) to (9) are repeated until a given termination criterion
 is fulfilled.
\end_layout

\begin_layout Section
Architecture
\end_layout

\begin_layout Standard
The basic metaphor of the 
\family sans
\series bold
\shape smallcaps
Jenetics
\family default
\series default
\shape default
 library is the 
\emph on
Evolution Stream
\emph default
, implemented via the Java 8 streaming API.
 Therefore it is no longer necessary (and advised) to perform the evolution
 steps in an 
\emph on
imperative
\emph default
 way.
 An evolution stream is powered by---and bound to respectively---an 
\emph on
Evolution Engine
\emph default
, which performs the needed 
\emph on
evolution
\emph default
 steps for one generation; the steps are described in the body of the while-loop
 in listing 
\begin_inset CommandInset ref
LatexCommand vref
reference "lis:Genetic-algorithm"

\end_inset

.
 Once the evolution engine is created, it can be used by multiple evolution
 streams, which can be safely used in different execution threads.
 This is possible, because the evolution 
\family typewriter
Engine
\family default
 doesn't have any mutable global state.
 It is practically a stateless function, 
\begin_inset Formula $f_{E}:\,\mathrm{P}\rightarrow\mathrm{P}$
\end_inset

, which maps a start population, 
\begin_inset Formula $\mathrm{P}$
\end_inset

, to an evolved result population.
 The 
\family typewriter
Engine
\family default
 function, 
\begin_inset Formula $f_{E}$
\end_inset

, is, of course, 
\emph on
non
\emph default
-deterministic.
 Calling it twice with the same start population will lead to different
 result populations.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../resources/model/EngineModel.eps
	width 85text%
	BoundingBox 0bp 0bp 432bp 72bp

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Evolution-engine-model"

\end_inset

Evolution engine model
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:Evolution-engine-model"

\end_inset

 illustrates the main 
\emph on
evolution
\emph default
 engine classes, together with its dependencies.
 Since the 
\family typewriter
Engine
\family default
 class itself is immutable, and can't be changed after creation, it is build/con
figured via a builder.
 After the 
\family typewriter
Engine
\family default
 has been created, it can be used to create an arbitrary number of 
\family typewriter
Evolution\SpecialChar \-
Stream
\family default
s.
 The 
\family typewriter
Evolution\SpecialChar \-
Stream
\family default
 is used to control the evolutionary process and collect the final result.
 This is done in the same way as for the normal 
\family typewriter
java.\SpecialChar \-
util.\SpecialChar \-
stream.\SpecialChar \-
Stream 
\family default
classes.
 With the additional 
\family typewriter
limit(Predicate)
\family default
 method, it is possible to truncate the 
\family typewriter
Evolution\SpecialChar \-
Stream
\family default
 if some termination criteria is fulfilled.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../resources/model/PackageModel.eps
	width 60text%
	BoundingBox 0bp 0bp 288bp 137bp

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Package-structure"

\end_inset

Package structure
\begin_inset Index idx
status open

\begin_layout Plain Layout
Package structure
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Diagram 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:Package-structure"

\end_inset

 shows the package structure of the library which consists of the following
 packages:
\end_layout

\begin_layout Description

\family typewriter
org.jenetics
\family default
 This is the base package of the 
\family sans
\series bold
\shape smallcaps
Jenetics
\family default
\series default
\shape default
 library and contains all domain classes, like 
\family typewriter
Gene
\family default
, 
\family typewriter
Chromosome
\family default
 or 
\family typewriter
Genotype
\family default
.
 Most of this types are immutable data classes and doesn't implement any
 behavior.
 It also contains the 
\family typewriter
Selector
\family default
 and 
\family typewriter
Alterer
\family default
 interfaces and its implementations.
 The classes in this package are (almost) sufficient to implement an own
 GA implementation.
\end_layout

\begin_layout Description

\family typewriter
org.jenetics.engine
\family default
 This package contains the actual GA implementation classes, e.
\begin_inset space ~
\end_inset

g.
 
\family typewriter
Engine
\family default
, 
\family typewriter
Evolution\SpecialChar \-
Stream
\family default
 or 
\family typewriter
Evolution\SpecialChar \-
Result
\family default
.
 They mainly operate on the domain classes of the 
\family typewriter
org.\SpecialChar \-
jenetics
\family default
 package.
\end_layout

\begin_layout Description

\family typewriter
org.jenetics.stat 
\family default
This package contains additional statistics classes which are not available
 in the Java core library.
 Java only includes classes for calculating the sum and the average of a
 given numeric stream (e.
\begin_inset space ~
\end_inset

g.
 
\family typewriter
Double\SpecialChar \-
Summary\SpecialChar \-
Statistics
\family default
).
 With the additions in this package it is also possible to calculate the
 variance, skewness and kurtosis---using the 
\family typewriter
Double\SpecialChar \-
Moment\SpecialChar \-
Statistics
\family default
 class.
 The 
\family typewriter
Evolution\SpecialChar \-
Statistics
\family default
 object, which can be calculated for every generation, relies on the classes
 of this package.
\end_layout

\begin_layout Description

\family typewriter
org.jenetics.util
\family default
 This package contains the collection classes (
\family typewriter
Seq
\family default
, 
\family typewriter
ISeq
\family default
 and 
\family typewriter
MS
\family default
eq) which are used in the public interfaces of the 
\family typewriter
Chromosome
\family default
 and 
\family typewriter
Genotype
\family default
.
 It also contains the 
\family typewriter
Random\SpecialChar \-
Registry
\family default
 class, which implements the global PRNG lockup, as well as helper 
\family typewriter
IO
\family default
 classes for serializing 
\family typewriter
Genotype
\family default
s and whole 
\family typewriter
Population
\family default
s.
\end_layout

\begin_layout Section
Base classes
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Base classes
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sec:Base-classes"

\end_inset


\end_layout

\begin_layout Standard
This chapter describes the main classes which are needed to setup and run
 an genetic algorithm with the 
\family sans
\series bold
\shape smallcaps
Jenetics
\family default
\series default
\shape default

\begin_inset Foot
status collapsed

\begin_layout Plain Layout
The documentation of the whole API is part of the download package or can
 be viewed online: 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://jenetics.sourceforge.net/javadoc/index.html
\end_layout

\end_inset

.
\end_layout

\end_inset

 library.
\end_layout

\begin_layout Subsection
Domain classes
\end_layout

\begin_layout Standard
Most of the domain classes are pure data classes and can be treated as 
\emph on
value
\emph default
 objects
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://en.wikipedia.org/wiki/Value_object
\end_layout

\end_inset


\end_layout

\end_inset

.
 All 
\family typewriter
Gene
\family default
 and 
\family typewriter
Chromosome
\family default
 implementations are immutable as well as the 
\family typewriter
Genotype
\family default
 and 
\family typewriter
Phenotype
\family default
 class.
 The only exception is the 
\family typewriter
Population
\family default
 class, where it is possible to add and/or remove elements after it's creation.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../resources/model/DomainModel.eps
	width 85text%
	BoundingBox 0bp 0bp 432bp 180bp

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Domain-model"

\end_inset

Domain model
\end_layout

\end_inset


\end_layout

\end_inset

Figure 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:Domain-model"

\end_inset

 shows the class-diagram of the main structures of the data classes.
 All structural GA classes are located in the 
\family typewriter
org.jenetics
\family default
 package.
 The
\family typewriter
 Gene
\family default
 is the base of the class structure.

\family typewriter
 Gene
\family default
s are aggregated in
\family typewriter
 Chromosome
\family default
s.
 One to n
\family typewriter
 Chromosome
\family default
s are aggregated in
\family typewriter
 Genotype
\family default
s.
 A
\family typewriter
 Genotype
\family default
 and a fitness
\family typewriter
 Function
\family default
 form the
\family typewriter
 Phenotype, which
\family default
 are collected into a
\family typewriter
 Population
\family default
.
\end_layout

\begin_layout Subsubsection
Gene
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Gene
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
Gene
\family default
s are the basic building blocks of the
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 library.
 They contain the actual information of the encoded solution, the allele
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Allele
\end_layout

\end_inset

.
 Some of the implementations also contains domain information of the 
\emph on
wrapped
\emph default
 allele.
 This is the case for all 
\family typewriter
Bounded\SpecialChar \-
Gene
\family default
, which contain the allowed minimum and maximum values.
 All
\family typewriter
 Gene
\family default
 implementations are final and immutable.
 In fact, they are all value-based classes and fulfill the properties which
 are described in the Java 8 API documentation
\begin_inset CommandInset citation
LatexCommand cite
key "OracleJDKValueBasedClasses"

\end_inset

.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
It is also worth reading the blog entry from Stephen Colebourne: 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://blog.joda.org/2014/03/valjos-value-java-objects.html
\end_layout

\end_inset


\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
Beside the container functionality for the allele, every 
\family typewriter
Gene
\family default
 is its own factory and is able to create new, random instances of the same
 type and with the same constraints.
 The factory methods are used by the 
\family typewriter
Alterer
\family default
s for creating new 
\family typewriter
Gene
\family default
s from the existing one and play a crucial role by the exploration of the
 problem space.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

public interface Gene<A, G extends Gene<A, G>>
\end_layout

\begin_layout Plain Layout

    extends Factory<G>, Serializable, Verifiable
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

    public A getAllele();
\end_layout

\begin_layout Plain Layout

    public G newInstance();
\end_layout

\begin_layout Plain Layout

    public G newInstance(A allele);
\end_layout

\begin_layout Plain Layout

    public boolean isValid();
\end_layout

\begin_layout Plain Layout

}
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Gene-interface"

\end_inset


\family typewriter
Gene
\family default
 interface
\end_layout

\end_inset


\end_layout

\end_inset

Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Gene-interface"

\end_inset

 shows the most important methods of the 
\family typewriter
Gene
\family default
 interface.
 The 
\family typewriter
isValid
\family default
 method, introduced by the 
\family typewriter
Verifiable
\family default
, allows the gene to mark itself as invalid or invalid receptively.
 All invalid genes are replaced with new ones during the evolution phase.
 
\end_layout

\begin_layout Standard
The available 
\family typewriter
Gene
\family default
 implementations should cover a wide range of problem encodings.
 Refer to chapter
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Genes"

\end_inset

 for how to implement your own 
\family typewriter
Gene
\family default
 types.
\end_layout

\begin_layout Subsubsection
Chromosome
\end_layout

\begin_layout Standard
A Chromosome serves as a container for Genes and is the main target of alteratio
n step.
 This means, that only chromosomes with the same position within a Genotype
 are used by the crossover alterer.
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

public interface Chromosome<G extends Gene<?, G>>
\end_layout

\begin_layout Plain Layout

    extends Factory<Chromosome<G>>, Serializable, Verifiable
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

    public G getAllele();
\end_layout

\begin_layout Plain Layout

    public G newInstance();
\end_layout

\begin_layout Plain Layout

    public G newInstance(A allele);
\end_layout

\begin_layout Plain Layout

    public boolean isValid();
\end_layout

\begin_layout Plain Layout

}
\begin_inset Caption

\begin_layout Plain Layout

\family typewriter
Chromosome
\family default
 interface
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Genotype
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Genotype
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sub:Genotype"

\end_inset


\end_layout

\begin_layout Standard
The central class, the GA is working with, is the
\family typewriter
 Genotype
\family default
.
 It is the
\emph on
 structural
\emph default
 representative of an individual, whereas the
\family typewriter
 Phenotype
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Phenotype
\end_layout

\end_inset


\family default
 is the
\emph on
 actual
\emph default
 representative of an individual.
 but only consists of the genotype and the fitness function and doesn't
 change the basic structure.
 The phenotype is
\emph on
 only
\emph default
 a container which forms the environment of the genotype.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../resources/graphic/Genotype.eps
	width 90text%
	BoundingBox 0bp 0bp 402bp 183bp

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Genotype-structure"

\end_inset

Genotype structure
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Genotype
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:Genotype-structure"

\end_inset

 shows the genotype structure.
 A genotype consists of 
\begin_inset Formula $N_{G}$
\end_inset

 chromosomes and a chromosome consists of 
\begin_inset Formula $N_{C[i]}$
\end_inset

 genes (depending on the chromosome).
 The overall number of genes of a genotype is given by the sum of the chromosome
's genes, which can be accessed via the
\family typewriter
 Genotype\SpecialChar \-
.getNumberOfGenes()
\family default
 method:
\begin_inset Formula 
\begin{equation}
N_{g}=\sum_{i=0}^{N_{G}-1}N_{C[i]}\label{eq:Number of genes}
\end{equation}

\end_inset

The chromosomes
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Chromosome
\end_layout

\end_inset

 of a genotype doesn't have to have necessarily the same size.
 It is only required that all genes are from the same type and the genes
 within a chromosome have the same constraints; e.
\begin_inset space ~
\end_inset

g.
 the same min- and max values for numerical genes.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

Genotype<DoubleGene> genotype = Genotype.of(
\end_layout

\begin_layout Plain Layout

    DoubleChromosome.of(0.0, 1.0, 8),
\end_layout

\begin_layout Plain Layout

    DoubleChromosome.of(1.0, 2.0, 10),
\end_layout

\begin_layout Plain Layout

    DoubleChromosome.of(0.0, 10.0, 9),
\end_layout

\begin_layout Plain Layout

    DoubleChromosome.of(0.1, 0.9, 5)
\end_layout

\begin_layout Plain Layout

);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The code snippet in the listing above creates a genotype with the same structure
 as shown in figure 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:Genotype-structure"

\end_inset

.
 In this example the
\family typewriter
 DoubleGene
\family default
 has been chosen for gene type.
\end_layout

\begin_layout Subsubsection
Phenotype
\end_layout

\begin_layout Standard
The 
\family typewriter
Phenotype
\family default
 is a composite of the 
\family typewriter
Genotype
\family default
 and the fitness function, where the fitness function represents the environment
 the 
\family typewriter
Genotype
\family default
 lives in.
 It
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

public final class Phenotype<
\end_layout

\begin_layout Plain Layout

    G extends Gene<?, G>,
\end_layout

\begin_layout Plain Layout

    C extends Comparable<? super C>
\end_layout

\begin_layout Plain Layout

>
\end_layout

\begin_layout Plain Layout

    implements Comparable<Phenotype<G, C>>, Verifiable
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

    public G getAllele();
\end_layout

\begin_layout Plain Layout

    public G newInstance();
\end_layout

\begin_layout Plain Layout

    public G newInstance(A allele);
\end_layout

\begin_layout Plain Layout

    public boolean isValid();
\end_layout

\begin_layout Plain Layout

}
\begin_inset Caption

\begin_layout Plain Layout

\family typewriter
Phenotype
\family default
 class
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Population
\end_layout

\begin_layout Standard
A population is a collection of Phenotypes.
 
\end_layout

\begin_layout Subsection
Operation classes
\end_layout

\begin_layout Standard
\begin_inset CommandInset href
LatexCommand href
name "Genetic operators"
target "https://en.wikipedia.org/wiki/Genetic_operator"

\end_inset

 are used for creating
\shape italic
 genetic
\shape default
 diversity (
\family typewriter
Alterer
\family default
) and select potentially useful solutions for recombination (
\family typewriter
Selector
\family default
).
 This section gives you an overview about the genetic operators available
 in the
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 library.
 It also contains some theoretical information, which should help you to
 choose the right combination of operators and parameters, for the problem
 to be solved.
\end_layout

\begin_layout Subsubsection
Selector
\end_layout

\begin_layout Standard
Selectors are responsible for selecting a given number of individuals from
 the population.
 The selectors are used to divide the population into
\shape italic
 survivors
\shape default
 and
\shape italic
 offspring
\shape default
.
 The selectors for
\shape italic
\emph on
 offspring
\shape default
\emph default
 and for the
\shape italic
\emph on
 survivors
\shape default
\emph default
 can be chosen independently.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

Engine<DoubleGene, Double> engine = Engine.builder(...)
\end_layout

\begin_layout Plain Layout

    .offspringFraction(0.7)
\end_layout

\begin_layout Plain Layout

    .survivorsSelector(new RouletteWheelSelector<>())
\end_layout

\begin_layout Plain Layout

    .offspringSelector(new TournamentSelector<>())
\end_layout

\begin_layout Plain Layout

    .build();
\end_layout

\end_inset

The
\family typewriter
 offspringFraction
\family default
, 
\begin_inset Formula $f_{O}\in[0,1]$
\end_inset

, determines the number of selected offspring
\begin_inset Formula 
\begin{equation}
N_{O_{g}}=\left\Vert O_{g}\right\Vert =\textrm{rint}\left(\left\Vert P_{g}\right\Vert \cdot f_{O}\right)
\end{equation}

\end_inset

and the number of selected survivors
\begin_inset Formula 
\begin{equation}
N_{S_{g}}=\left\Vert S_{g}\right\Vert =\left\Vert P_{g}\right\Vert -\left\Vert O_{g}\right\Vert .
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
Jenetics comes with the following selectors:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{multicols}{2}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
TournamentSelector
\end_layout

\begin_layout Itemize
TruncationSelector
\end_layout

\begin_layout Itemize
MonteCarloSelector
\end_layout

\begin_layout Itemize
ProbabilitySelector
\end_layout

\begin_layout Itemize
RouletteWheelSelector
\end_layout

\begin_layout Itemize
LinearRankSelector
\end_layout

\begin_layout Itemize
ExponentailRankSelector
\end_layout

\begin_layout Itemize
BoltzmannSelector
\end_layout

\begin_layout Itemize
StochasticUniversalSelector
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{multicols}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure ### shows the whole class hierarchy of the currently available selectors.
 On the top the hierarchy is the
\family typewriter
 Selector
\family default
 interface with the
\family typewriter
 select
\family default
 method.
 Beside the well known standard selector implementation the
\family typewriter
 Probability\SpecialChar \-
Selector
\family default
 is the base of a set of fitness proportional selectors.
\end_layout

\begin_layout Paragraph
Tournament selector
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Tournament selector
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In 
\begin_inset CommandInset href
LatexCommand href
name "tournament selection"
target "https://en.wikipedia.org/wiki/Tournament_selection"

\end_inset

 the best individual from a random sample of 
\begin_inset Formula $s$
\end_inset

 individuals is chosen from the population 
\begin_inset Formula $Pg$
\end_inset

.
 The samples are drawn with replacement.
 An individual will win a tournament only if the fitness is greater than
 the fitness of the other 
\begin_inset Formula $s-1$
\end_inset

 competitors.
 Note that the worst individual never survives, and the best individual
 wins in all the tournaments it participates.
 The selection pressure can be varied by changing the tournament size
\begin_inset Formula $s$
\end_inset

.
 For large values of 
\begin_inset Formula $s$
\end_inset

, weak individuals have less chance of being selected.
\end_layout

\begin_layout Paragraph
Truncation selector
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Truncation selector
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In 
\begin_inset CommandInset href
LatexCommand href
name "truncation selection"
target "https://en.wikipedia.org/wiki/Truncation_selection"

\end_inset

 individuals are sorted according to their fitness.
 Only the 
\begin_inset Formula $n$
\end_inset

 best individuals are selected.
 The truncation selection is a very basic selection algorithm.
 It has it's strength in fast selecting individuals in large populations,
 but is not very often used in practice.
\end_layout

\begin_layout Paragraph
Monte Carlo selector
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Monte Carlo selector
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Monte Carlo selector selects the individuals from a given population
 randomly.
 This selector can be used to measure the performance of a other selectors.
 In general, the
\shape italic
\emph on
 performance
\shape default
\emph default
 of a selector should be better than the selection performance of the Monte
 Carlo selector.
\end_layout

\begin_layout Paragraph
Probability selectors
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Probability selector
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "par:Probability-selectors"

\end_inset


\end_layout

\begin_layout Standard
Probability selectors are a variation of
\shape italic
 fitness proportional
\shape default
 selectors and selects individuals from a given population based on it's
\shape italic
 selection
\shape default
 probability 
\begin_inset Formula $P(i)$
\end_inset

.
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../resources/graphic/FitnessProportionalSelection.eps
	width 90text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Fitness-proportional-selection"

\end_inset

Fitness proportional selection
\end_layout

\end_inset


\end_layout

\end_inset

Fitness proportional selection works as shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Fitness-proportional-selection"

\end_inset

.
 An uniform distributed random number 
\begin_inset Formula $r\in\left[0,F\right)$
\end_inset

 specifies which individual is selected, by argument minimization:
\begin_inset Formula 
\begin{equation}
i\leftarrow\underset{n\in\left[0,N\right)}{\textrm{minarg}}\left\{ r<\sum_{i=0}^{n}f_{i}\right\} ,
\end{equation}

\end_inset

where 
\begin_inset Formula $N$
\end_inset

 is the number of individuals and 
\begin_inset Formula $f_{i}$
\end_inset

 the fitness value of the 
\begin_inset Formula $i^{\textrm{th}}$
\end_inset

 individual.
 The probability selector works the same way, only the fitness value 
\begin_inset Formula $f_{i}$
\end_inset

 is replaced by the individual's selection probability 
\begin_inset Formula $P(i)$
\end_inset

.
 It is not necessary to sort the population.
 The selection probability of an individual 
\begin_inset Formula $i$
\end_inset

 follows a binomial distribution
\begin_inset Formula 
\begin{equation}
P(i,k)=\left(\begin{array}{c}
n\\
k
\end{array}\right)P(i)^{k}\left(1-P(i)\right)^{n-k}
\end{equation}

\end_inset

where 
\begin_inset Formula $n$
\end_inset

 is the overall number of selected individuals and 
\begin_inset Formula $k$
\end_inset

 the number of individual
\begin_inset Formula $i$
\end_inset

 in the set of selected individuals.
 The runtime complexity of the implemented probability selectors is 
\begin_inset Formula $O(n+\log(n))$
\end_inset

 instead of 
\begin_inset Formula $O(n^{2})$
\end_inset

 as for the naive approach:
\emph on
 A binary (index) search is performed on the summed probability array.
\end_layout

\begin_layout Paragraph
Roulette-wheel selector
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Roulette-wheel selector
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The roulette-wheel selector is also known as fitness proportional selector.
 In the
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 library it is implemented as
\emph on
 probability
\emph default
 selector.
 The fitness value 
\begin_inset Formula $f_{i}$
\end_inset

 is used to calculate the selection probability of individual 
\begin_inset Formula $i$
\end_inset

.
\begin_inset Formula 
\begin{equation}
P(i)=\frac{f_{i}}{\sum_{j=1}^{N}f_{j}}
\end{equation}

\end_inset

Selecting 
\begin_inset Formula $n$
\end_inset

 individuals from a given population is equivalent to play 
\begin_inset Formula $n$
\end_inset

 times on the roulette-wheel.
 The population don't have to be sorted before selecting the individuals.
 Roulette-wheel selection is one of the traditional selection strategies.
\end_layout

\begin_layout Paragraph
Linear-rank selector
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Linear-rank selector
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In linear-ranking selection the individuals are sorted according to their
 fitness values.
 The rank 
\begin_inset Formula $N$
\end_inset

 is assigned to the best individual and the rank 1 to the worst individual.
 The selection probability 
\begin_inset Formula $P(i)$
\end_inset

 of individual
\begin_inset Formula $i$
\end_inset

 is linearly assigned to the individuals according to their rank.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
P(i)=\frac{1}{N}\left(n^{-}+\left(n^{+}-n^{-}\right)\frac{i-1}{N-1}\right).
\end{equation}

\end_inset

Here 
\begin_inset Formula $\frac{n^{-}}{N}$
\end_inset

 is the probability of the worst individual to be selected and 
\begin_inset Formula $\frac{n^{+}}{N}$
\end_inset

 the probability of the best individual to be selected.
 As the population size is held constant, the condition 
\begin_inset Formula $n^{+}=2-n^{-}$
\end_inset

 and 
\begin_inset Formula $n^{-}\geq0$
\end_inset

 must be fulfilled.
 Note that all individuals get a different rank, respectively a different
 selection probability, even if they have the same fitness value.
\begin_inset CommandInset citation
LatexCommand cite
key "Blickle97acomparison"

\end_inset


\end_layout

\begin_layout Paragraph
Exponential-rank selector
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Exponential-rank selector
\end_layout

\end_inset


\end_layout

\begin_layout Standard
An alternative to the
\shape italic
 weak
\shape default
 linear-rank selector is to assign survival probabilities to the sorted
 individuals using an exponential function:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
P(i)=\left(c-1\right)\frac{c^{i-1}}{c^{N}-1},
\end{equation}

\end_inset

where
\begin_inset Formula $c$
\end_inset

 must within the range 
\begin_inset Formula $\left[0\ldots1\right)$
\end_inset

.
 A small value of 
\begin_inset Formula $c$
\end_inset

 increases the probability of the best individual to be selected.
 If 
\begin_inset Formula $c$
\end_inset

 is set to zero, the selection probability of the best individual is set
 to one.
 The selection probability of all other individuals is zero.
 A value near one equalizes the selection probabilities.
 This selector sorts the population in descending order before calculating
 the selection probabilities.
\end_layout

\begin_layout Paragraph
Boltzmann selector
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Boltzmann selector
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The selection probability of the Boltzmann selector is defined as
\begin_inset Formula 
\begin{equation}
P(i)=\frac{\textrm{e}^{b\cdot f_{i}}}{Z},
\end{equation}

\end_inset

where 
\begin_inset Formula $b$
\end_inset

 is a parameter which controls the selection intensity and 
\begin_inset Formula $Z$
\end_inset

 is defined as
\begin_inset Formula 
\begin{equation}
Z=\sum_{i=1}^{n}\textrm{e}^{f_{i}}.
\end{equation}

\end_inset

Positive values of 
\begin_inset Formula $b$
\end_inset

 increases the selection probability of individuals with high fitness values
 and negative values of 
\begin_inset Formula $b$
\end_inset

 decreases it.
 If 
\begin_inset Formula $b$
\end_inset

 is zero, the selection probability of all individuals is set to 
\begin_inset Formula $\frac{1}{N}$
\end_inset

.
\end_layout

\begin_layout Paragraph
Stochastic-universal selector
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Stochastic-universal selector
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Stochastic-universal selection 
\begin_inset CommandInset citation
LatexCommand cite
key "back1996evolutionary"

\end_inset

 (SUS) is a method for selecting individuals according to some given probability
 in a way that minimizes the chance of fluctuations.
 It can be viewed as a type of roulette game where we now have 
\begin_inset Formula $p$
\end_inset

 equally spaced points which we spin.
 SUS uses a single random value for selecting individuals by choosing them
 at equally spaced intervals.
 The selection method was introduced by James Baker.
 
\begin_inset CommandInset citation
LatexCommand cite
key "baker1987selection"

\end_inset


\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../resources/graphic/StochasticUniversalSelection.eps
	width 75text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Stochastic-universal-selection"

\end_inset

Stochastic-universal selection
\end_layout

\end_inset


\end_layout

\end_inset

Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Stochastic-universal-selection"

\end_inset

 shows the function of the stochastic-universal selection, where 
\begin_inset Formula $n$
\end_inset

 is the number of individuals to select.
 Stochastic universal sampling ensures a selection of offspring, which is
 closer to what is deserved than roulette wheel selection.
\begin_inset CommandInset citation
LatexCommand cite
key "Sivanandam2010"

\end_inset


\end_layout

\begin_layout Subsubsection
Alterer
\end_layout

\begin_layout Standard
The representation determines the bounds of the search space, but the alterers
 determine how the space can be traversed: alterers are responsible for
 the genetic diversity of the genetic algorithm.
 The two alterer types used in
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 are
\end_layout

\begin_layout Enumerate
\begin_inset CommandInset href
LatexCommand href
name "mutation"
target "https://en.wikipedia.org/wiki/Mutation_(genetic_algorithm)"

\end_inset

 and
\end_layout

\begin_layout Enumerate
recombination (e.
\begin_inset space ~
\end_inset

g.
 
\begin_inset CommandInset href
LatexCommand href
name "crossover"
target "https://en.wikipedia.org/wiki/Crossover_(genetic_algorithm)"

\end_inset

).
\end_layout

\begin_layout Subsubsection
Mutation
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Mutation
\end_layout

\end_inset


\end_layout

\begin_layout Standard
There are two distinct roles
\emph on
 mutation
\emph default
 plays in an Genetic algorithm:
\end_layout

\begin_layout Enumerate
Exploring the search space: By making small moves, mutation allows a population
 to explore the search space.
 This exploration is often slow compared to crossover, but in problems where
 crossover is disruptive this can be an important way to explore the landscape.
\end_layout

\begin_layout Enumerate
Maintaining diversity: Mutation prevents a population from correlating.
 Even if most of the search is being performed by crossover, mutation can
 be vital to provide the diversity which crossover needs.
\end_layout

\begin_layout Standard
The mutation probability, 
\begin_inset Formula $P(m)$
\end_inset

, is the parameter that must be optimized.
 The optimal value of the mutation rate depends on the role mutation plays.
 If mutation is the only source of exploration (if there is no crossover),
 the mutation rate should be set to a value that ensures that a reasonable
 neighborhood of solutions is explored.
\end_layout

\begin_layout Standard
The mutation probability, 
\begin_inset Formula $P(m)$
\end_inset

, is defined as the probability that a specific gene, over the whole population,
 is mutated.
 That means, the (average) number of genes mutated by a mutator is
\begin_inset Formula 
\begin{equation}
\hat{\mu}=N_{P}\cdot N_{g}\cdot P(m)
\end{equation}

\end_inset

where 
\begin_inset Formula $N_{g}$
\end_inset

 is the number of available genes of a genotype and 
\begin_inset Formula $N_{P}$
\end_inset

 the population size (revere to equation 
\begin_inset CommandInset ref
LatexCommand vref
reference "eq:Number of genes"

\end_inset

).
\end_layout

\begin_layout Paragraph
Mutator
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Mutator
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The mutator has to deal with the problem, that the genes are arranged in
 a
\shape italic
 
\begin_inset Formula $3D$
\end_inset


\shape default
 structure (see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Genotype"

\end_inset

).
 The mutator selects the gene which will be mutated in three steps:
\end_layout

\begin_layout Enumerate
Select a genotype 
\begin_inset Formula $G[i]$
\end_inset

 from the population with probability 
\begin_inset Formula $P_{G}(m)$
\end_inset

,
\end_layout

\begin_layout Enumerate
select a chromosome 
\begin_inset Formula $C[j]$
\end_inset

 from the selected genotype 
\begin_inset Formula $G[i]$
\end_inset

 with probability
\begin_inset Formula $P_{C}(m)$
\end_inset

 and
\end_layout

\begin_layout Enumerate
select a gene 
\begin_inset Formula $g[k]$
\end_inset

 from the selected chromosome 
\begin_inset Formula $C[j]$
\end_inset

 with probability 
\begin_inset Formula $P_{g}(m)$
\end_inset

.
\end_layout

\begin_layout Standard
The needed
\emph on
 sub
\emph default
-selection probabilities are set to
\begin_inset Formula 
\begin{equation}
P_{G}(m)=P_{C}(m)=P_{g}(m)=\sqrt[3]{P(m)}.
\end{equation}

\end_inset


\end_layout

\begin_layout Paragraph
Gaussian mutator
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Gaussian mutator
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Gaussian mutator performs the mutation of number genes.
 This mutator picks a new value based on a Gaussian distribution around
 the current value of the gene.
 The variance of the new value (before clipping to the allowed gene range)
 will be
\begin_inset Formula 
\begin{equation}
\hat{\sigma}^{2}=\left(\frac{g_{max}-g_{min}}{4}\right)^{2}
\end{equation}

\end_inset

where 
\begin_inset Formula $g_{min}$
\end_inset

 and 
\begin_inset Formula $g_{max}$
\end_inset

 are the valid minimum and maximum values of the number gene.
 The new value will be cropped to the gene's boundaries.
\end_layout

\begin_layout Paragraph
Swap mutator
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Swap mutator
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The swap mutator changes the order of genes in a chromosome, with the hope
 of bringing related genes closer together, thereby facilitating the production
 of building blocks.
 This mutation operator can also be used for combinatorial problems, where
 no duplicated genes within a chromosome are allowed, e.
\begin_inset space ~
\end_inset

g.
 for the TSP.
\end_layout

\begin_layout Subsubsection
Recombination
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Recombination
\end_layout

\end_inset


\end_layout

\begin_layout Standard
An enhanced genetic algorithm (EGA) combine elements of existing solutions
 in order to create a new solution, with some of the properties of each
 parents.
 Recombination creates a new chromosome by combining parts of two (or more)
 parent chromosomes.
 This combination of chromosomes can be made by selecting one or more crossover
 points, splitting these chromosomes on the selected points, and merge those
 portions of different chromosomes to form new ones.
\end_layout

\begin_layout Standard
\begin_inset Box Shaded
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "90text%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Plain Layout
\align block

\family sans
\shape italic
\emph on
Because of the possible different chromosome length and/or chromosome constraint
s within a genotype, only chromosomes with the same genotype position are
 recombined.
\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The recombination probability, 
\begin_inset Formula $P(r)$
\end_inset

, determines the probability that a given individual (genotype) of a population
 is selected for recombination.
 The (mean) number of changed individuals depend on the concrete implementation
 and can be vary from 
\begin_inset Formula $P(r)\cdot N_{G}$
\end_inset

 to 
\begin_inset Formula $P(r)\cdot N_{G}\cdot O_{R}$
\end_inset

, where 
\begin_inset Formula $O_{R}$
\end_inset

 is the order of the recombination, which is the number of individuals involved
 in the
\family typewriter
re combine
\family default
 method.
\end_layout

\begin_layout Paragraph
Single-point crossover
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Single-point crossover
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Crossover!Single-point crossover
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The single-point crossover changes two children chromosomes by taking two
 chromosomes and cutting them at some, randomly chosen, site.
 If we create a child and its complement we preserve the total number of
 genes in the population, preventing any genetic drift.
 Single-point crossover is the classic form of crossover.
 However, it produces very slow mixing compared with multi-point crossover
 or uniform crossover.
 For problems where the site position has some intrinsic meaning to the
 problem single-point crossover can lead to smaller disruption than multiple-poi
nt or uniform crossover.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../resources/graphic/SinglePointCrossover.eps
	width 75text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Single-point-crossover"

\end_inset

Single-point crossover
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Single-point crossover
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Crossover!Single-point crossover
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Single-point-crossover"

\end_inset

 shows how the
\family typewriter
 SinglePointCrossover
\family default
 class is performing the crossover for different crossover points---in the
 given example for the chromosome indexes 
\begin_inset Formula $0$
\end_inset

, 
\begin_inset Formula $1$
\end_inset

, 
\begin_inset Formula $3$
\end_inset

, 
\begin_inset Formula $6$
\end_inset

 and 
\begin_inset Formula $7$
\end_inset

.
\end_layout

\begin_layout Paragraph
Multi-point crossover
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Multiple-point crossover
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Crossover!Multiple-point crossover
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If the
\family typewriter
 MultiPointCrossover
\family default
 class is created with one crossover point, it behaves exactly like the
 single-point crossover.
 The following picture shows how the Multi-point crossover works with two
 crossover points, defined at index 
\begin_inset Formula $1$
\end_inset

 and 
\begin_inset Formula $4$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../resources/graphic/2PointCrossover.eps
	width 75text%
	clip

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
2-point crossover
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
2-point crossover
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Crossover!2-point crossover
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:3-point-crossover"

\end_inset

 you can see how the crossover works for an odd number of crossover points.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../resources/graphic/3PointCrossover.eps
	width 75text%
	clip

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:3-point-crossover"

\end_inset

3-point crossover
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
3-point crossover
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Crossover!3-point crossover
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Partially-matched crossover
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Partially-matched crossover
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Crossover!Partially-matched crossover
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The partially-matched crossover guarantees that all genes are found exactly
 once in each chromosome.
 No gene is duplicated by this crossover strategy.
 The partially-matched crossover (PMX) can be applied usefully in the TSP
 or other permutation problem encodings.
 Permutation encoding is useful for all problems where the fitness only
 depends on the ordering of the genes within the chromosome.
 This is the case in many combinatorial optimization problems.
 Other crossover operators for combinatorial optimization are:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{multicols}{2}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
order crossover
\end_layout

\begin_layout Itemize
cycle crossover
\end_layout

\begin_layout Itemize
edge recombination crossover
\end_layout

\begin_layout Itemize
edge assembly crossover
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{multicols}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The PMX is similar to the two-point crossover.
 A crossing region is chosen by selecting two crossing points (see figure
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Partially-matched-crossover"

\end_inset


\emph on
 a
\emph default
)).
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../resources/graphic/PMX.eps
	width 50text%
	BoundingBox 0bp 0bp 330bp 241bp
	clip
	rotateOrigin leftTop

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Partially-matched-crossover"

\end_inset

Partially-matched crossover
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Partially-matched crossover
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Crossover!Partially-matched crossover
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

After performing the crossover we--normally--got two invalid chromosomes
 (figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Partially-matched-crossover"

\end_inset


\emph on
 b
\emph default
)).
 Chromosome
\begin_inset Formula $1$
\end_inset

 contains the value 6 twice and misses the value 3.
 On the other side chromosome 
\begin_inset Formula $2$
\end_inset

 contains the value 3 twice and misses the value 6.
 We can observe that this crossover is equivalent to the exchange of the
 values 3
\begin_inset Formula $\rightarrow$
\end_inset

6, 4
\begin_inset Formula $\rightarrow$
\end_inset

5 and 5
\begin_inset Formula $\rightarrow$
\end_inset

4.
 To repair the two chromosomes we have to apply this exchange outside the
 crossing region (figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Partially-matched-crossover"

\end_inset


\emph on
 b
\emph default
)).
 At the end figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Partially-matched-crossover"

\end_inset

 
\emph on
c
\emph default
) shows the repaired chromosome.
\end_layout

\begin_layout Subsection
Engine classes
\end_layout

\begin_layout Standard
The dynamic classes, which perform the actual evolution, are located in
 the 
\family typewriter
org.\SpecialChar \-
jenetics.\SpecialChar \-
engine
\family default
 package.
 The 
\emph on
evolution stream
\emph default
 is the base metaphor for performing an GA.
 On the evolution stream you can define the termination predicate and than
 collect the final evolution result.
 This decouples the static data structure from the dynamic evolution part.
 The evolution stream is also very flexible, when it comes to collecting
 the final result.
 The 
\family typewriter
EvolutionResult
\family default
 class has several predefined collectors, but you are free to create your
 own one, which can be seamlessly 
\emph on
plugged
\emph default
 into the existing stream.
 Figure ...
\end_layout

\begin_layout Subsubsection
Fitness function
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Fitness function
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The fitness function is also an important part when modeling the GA.
 It takes a genotype as argument and returns, at least, a
\family typewriter
 Comparable
\family default
 object as result---the fitness value.
 This allows the GA, respectively the selection operators, to select the
 offspring- and survivor population.
 Some selectors have stronger requirements to the fitness value than a
\family typewriter
 Comparable
\family default
, but this constraints is checked by the Java type system at compile time.
\end_layout

\begin_layout Standard
The following example shows the simplest possible fitness function.
 It's the identity function and returns the allele of an
\begin_inset Formula $1\mathsf{x}1$
\end_inset


\shape italic
 float
\shape default
 genotype.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

public class Main {
\end_layout

\begin_layout Plain Layout

    static Double identity(final Genotype<DoubleGene> gt) {
\end_layout

\begin_layout Plain Layout

        return gt.getGene().getAllele();
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    public static void main(final String[] args) {
\end_layout

\begin_layout Plain Layout

        // Create fitness function from method reference.
\end_layout

\begin_layout Plain Layout

        Function<Genotype<DoubleGene>, Double> ff1 = 
\end_layout

\begin_layout Plain Layout

            Main::identity;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        // Create fitness function from lambda expression.
\end_layout

\begin_layout Plain Layout

        Function<Genotype<DoubleGene>, Double> ff2 = gt -> 
\end_layout

\begin_layout Plain Layout

            gt.getGene().getAllele();
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset

The first type parameter of the
\family typewriter
 Function
\family default
 defines the kind of genotype from which the fitness value is calculated
 and the second type parameter determines the return type.
\end_layout

\begin_layout Subsubsection
Fitness scaler
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Fitness scaler
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The fitness value, calculated by the fitness function, is treated as the
\shape italic
 raw
\shape default
-fitness of an individual.
 The
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 library allows you to apply an additional scaling function on the raw-fitness
 to form the fitness value which is used by the selectors.
 This can be useful when using probability selectors (see chapter 
\begin_inset CommandInset ref
LatexCommand vref
reference "par:Probability-selectors"

\end_inset

), where the actual amount of the fitness value influences the selection
 probability.
 In such cases, the fitness scaler gives you additional flexibility when
 selecting offspring and survivors.
 In the default configuration the raw-fitness is equal to the actual fitness
 value, that means, the used fitness scaler is the identity function.
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

class Sqrt extends Function<Double, Double> {
\end_layout

\begin_layout Plain Layout

    @Override
\end_layout

\begin_layout Plain Layout

    public Double apply(final Double value) {
\end_layout

\begin_layout Plain Layout

        return sqrt(value);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset

The given listing shows a fitness scaler which reduces the the raw-fitness
 to its square root.
 This gives weaker individuals a greater changes being selected and weakens
 the influence of
\emph on
 super
\emph default
-individuals.
\end_layout

\begin_layout Standard
\begin_inset Box Shaded
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "90col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Plain Layout

\family sans
When using a fitness scaler you have to take care that your scaler doesn't
\emph on
 destroy
\emph default
 your fitness value.
 This can be the case when your fitness value is negative and your fitness
 scaler squares the value.
 Trying to find the minimum will not work in this configuration.
\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Engine
\end_layout

\begin_layout Standard
The evolution Engine controls the how the evolution steps are executed.
 The evolution Engine is used for performing the actual evolution of a give
 population.
 One evolution step is executed by calling the Engine.\SpecialChar \-
evolve method, which
 returns an EvolutionResult object.
 This object contains the evolved Population plus additional information
 like execution duration of the several evolution sub-steps and information
 about the killed and as invalid marked individuals.
 The Engine object doesn't contain any mutable global state and can therefore
 safely used/called from different threads.
 It is also possible to create more than one EvolutionStream from the Engine
 and execute it in parallel.
\end_layout

\begin_layout Paragraph
EvolutionStream
\end_layout

\begin_layout Standard
The EvolutionStream is a kind of execution handle, where you can define
 termination condition of the evolution process and the final result.
 The stream can be truncated with the limit methods of the EvolutionStream.
 The final evolution result is determined by the collector applied to the
 collect method.
\end_layout

\begin_layout Paragraph
EvolutionResult
\end_layout

\begin_layout Standard
The 
\family typewriter
EvolutionResult
\family default
 is the intermediate result of one evolution step.
\end_layout

\begin_layout Paragraph
EvolutionStatistics
\end_layout

\begin_layout Standard
The 
\family typewriter
Evolution\SpecialChar \-
Statistics
\family default
 class allows you to gather additional statistical information from the
 evolution stream.
 This is especially useful during the development phase of your application,
 when you have to find the right parametrization of the evolution 
\family typewriter
Engine
\family default
.
 There are two different specializations of the EvolutionStatistics object
 available.
 The first is the general one, which will be working for every kind of genes
 and fitness types.
 It can be created via the Evolution\SpecialChar \-
Statistics.\SpecialChar \-
ofComparable() method.
 The second one collects additional statistical data for numeric fitness
 values.
 This can be created with the Evolution\SpecialChar \-
Statistics.\SpecialChar \-
ofNumber() method.
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

Engine<DoubleGene, Double> engine = ...
\end_layout

\begin_layout Plain Layout

EvolutionStatistics<?, Double> statistics = 
\end_layout

\begin_layout Plain Layout

    EvolutionStatistics.ofNumber();
\end_layout

\begin_layout Plain Layout

engine.stream()
\end_layout

\begin_layout Plain Layout

    .limit(100)
\end_layout

\begin_layout Plain Layout

    .peek(statistics)
\end_layout

\begin_layout Plain Layout

    .collect(toBestGenotype());
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\end_layout

\begin_layout Section
Nuts and bolts
\end_layout

\begin_layout Subsection
Collectors
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Collectors
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The
\family typewriter
 GeneticAlgorithm
\family default
 class offers population- and timing-statistics after every evolve step.
 This information can be used to measure the performance of the GA, or to
 implement a more sophisticated termination strategy than
\family typewriter
 evolve(100)
\family default
.
 Have a look at chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Termination"

\end_inset

 for more information about GA termination.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

GeneticAlgorithm<DoubleGene, Double> ga = ...
\end_layout

\begin_layout Plain Layout

ga.setup();
\end_layout

\begin_layout Plain Layout

for (int i = 0; i < 100; ++i) {
\end_layout

\begin_layout Plain Layout

    ga.evolve();
\end_layout

\begin_layout Plain Layout

    System.out.println(ga.getStatistics());
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The statistics object returned by the GA stores information---among other
 things---about the best- and the worst phenotype and some timing information,
 for performance analysis.
 The following listing shows the console output of an actual GA statistics.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstset{basicstyle=
\backslash
scriptsize
\backslash
ttfamily}
\end_layout

\begin_layout Plain Layout


\backslash
lstinputlisting{../resources/code/Statistics.out}
\end_layout

\begin_layout Plain Layout


\backslash
lstset{basicstyle=
\backslash
footnotesize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If the fitness value is a number type you can change the statistics calculator
 of the GA to get more specific statistics information.
 The listing shows how to set the number-statistics calculator for the GA.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final GeneticAlgorithm<DoubleGene, Double> ga = ...
\end_layout

\begin_layout Plain Layout

ga.setStatisticsCalculator(
\end_layout

\begin_layout Plain Layout

    new NumberStatistics.Calculator<DoubleGene, Double>()
\end_layout

\begin_layout Plain Layout

);
\end_layout

\begin_layout Plain Layout

ga.setup();
\end_layout

\begin_layout Plain Layout

for (int i = 0; i < 100; ++i) {
\end_layout

\begin_layout Plain Layout

    ga.evolve();
\end_layout

\begin_layout Plain Layout

    System.out.println(ga.getStatistics());
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
With the new statistics calculator the console output for an statistics
 object will look like the following listing.
 This is because instead of an
\family typewriter
 Statistics
\family default
 object an
\family typewriter
 NumberStatistics
\family default
 object is returned by the
\family typewriter
 getStatistics()
\family default
 method.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstset{basicstyle=
\backslash
scriptsize
\backslash
ttfamily}
\end_layout

\begin_layout Plain Layout


\backslash
lstinputlisting{../resources/code/NumberStatistics.out}
\end_layout

\begin_layout Plain Layout


\backslash
lstset{basicstyle=
\backslash
footnotesize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
For computation-performance analysis it might be interesting in which processing
 steps the computation time is spent.
 On
\emph on
 generation
\emph default
 basis this can be accessed via the
\family typewriter
 ga.getStatistics().getTime()
\family default
 property.
 The overall calculation time statistics is available via the
\family typewriter
 ga.getTimeStatistics()
\family default
 method.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstset{basicstyle=
\backslash
scriptsize
\backslash
ttfamily}
\end_layout

\begin_layout Plain Layout


\backslash
lstinputlisting{../resources/code/TimeStatistics.out}
\end_layout

\begin_layout Plain Layout


\backslash
lstset{basicstyle=
\backslash
footnotesize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The console output of the time statistics looks like listing above and has
 the same format for the overall- and the generation time statistics.
\end_layout

\begin_layout Subsection
Stream truncation
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
limit
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Stream truncation
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sub:Termination"

\end_inset


\end_layout

\begin_layout Standard
The easiest way to terminate an evolution stream is to evolve a specific
 number of generations.
 This might work well for most problems and termination is guaranteed.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

Engine<DoubleGene, Double> engine = ...
\end_layout

\begin_layout Plain Layout

Phenotype<DoubleGene, Double> result = engine.stream()
\end_layout

\begin_layout Plain Layout

    .limit(25)
\end_layout

\begin_layout Plain Layout

    .collect(toBestPhenotype());
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A better way for way for truncating the evolution stream is to use to call
 the 
\family typewriter
limit(Predicate)
\family default
 method of the 
\family typewriter
EvolutionStream
\family default
 class.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

Engine<DoubleGene, Double> engine = ...
\end_layout

\begin_layout Plain Layout

LongAdder counter = new LongAdder();
\end_layout

\begin_layout Plain Layout

Phenotype<DoubleGene, Double> result = engine.stream()
\end_layout

\begin_layout Plain Layout

    .limit(bySteadyFitness(5))
\end_layout

\begin_layout Plain Layout

    // Counting the generations.
\end_layout

\begin_layout Plain Layout

    .peek(r -> counter.increment())
\end_layout

\begin_layout Plain Layout

    .collect(toBestPhenotype());
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The evolution stream is truncated when the 
\emph on
limit
\emph default
 predicate (
\family typewriter
by\SpecialChar \-
Steady\SpecialChar \-
Fitness(5)
\family default
) returns false.

\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 comes with some default limit predicates implemented in the
\family typewriter
 limit
\family default
 class in the
\family typewriter
 org.jenetics.engine
\family default
 package.
 The steady-fitness terminator for example, truncates the stream if the
 best fitness value doesn't increase for 5 consecutive generations.
\end_layout

\begin_layout Subsection
Concurrency
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Concurrency
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 library parallelizes independent task whenever possible.
 Especially the evaluation of the fitness function is done concurrently.
 That means that the fitness function must be thread safe, because it is
 shared by all phenotypes of a population.
 The easiest way for achieving thread safety is to make the fitness function
 immutable and re-entrant.
 The used 
\family typewriter
Executor
\family default
 can be defined when building the evolution 
\family typewriter
Engine
\family default
 object.

\family sans
\series bold
\shape smallcaps
 
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

import java.util.concurrent.Executor;
\end_layout

\begin_layout Plain Layout

import java.util.concurrent.Executors;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public class Main {
\end_layout

\begin_layout Plain Layout

	private static Double eval(final Genotype<DoubleGene> gt) {
\end_layout

\begin_layout Plain Layout

        // calculate and return fitness
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    public static void main(final String[] args) {
\end_layout

\begin_layout Plain Layout

        Factory<Genotype<DoubleGene>> gtf = ...
\end_layout

\begin_layout Plain Layout

        final Engine<DoubleGene, Double> engine = Engine 			
\end_layout

\begin_layout Plain Layout

            .builder(Main::eval, gtf)
\end_layout

\begin_layout Plain Layout

             // Using 10 threads for evolving.
\end_layout

\begin_layout Plain Layout

            .executor(Executors.newFixedThreadPool(10))
\end_layout

\begin_layout Plain Layout

            .build()
\end_layout

\begin_layout Plain Layout

        ...
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset

If no 
\family typewriter
Executor
\family default
 is given, 
\family sans
\series bold
\shape smallcaps
Jenetics
\family default
\series default
\shape default
 uses a common 
\family typewriter
ForkJoinPool
\begin_inset Foot
status collapsed

\begin_layout Plain Layout

\family typewriter
ForkJoinPool.commonPool()
\end_layout

\end_inset


\family default
 for concurrency.
\end_layout

\begin_layout Subsection
Randomness
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Randomness
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Random
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In general, GAs heavily depends on
\emph on
 pseudo
\emph default
 random number generators (PRNG)
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
PRNG
\end_layout

\end_inset

 for creating new individuals and for the selection- and mutation-algorithms.

\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 uses the Java
\family typewriter
 Random
\family default
 object, respectively sub-types from it, for generating random numbers.
 To make the random engine pluggable, the
\family typewriter
 Random
\family default
 object is always fetched from the
\family typewriter
 Random\SpecialChar \-
Registry
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Random!Registry
\end_layout

\end_inset

.
 This makes it possible to change the implementation of the random engine
 without changing the client code.
 The central 
\family typewriter
Random\SpecialChar \-
Registry
\family default
 also allows to easily change 
\family typewriter
Random
\family default
 engine
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Random!Engine
\end_layout

\end_inset

 even for specific parts of the code.
\end_layout

\begin_layout Standard
The following example shows how to change and restore the
\family typewriter
 Random
\family default
 object.
 When opening the 
\family typewriter
with
\family default
 scope, changes to the
\family typewriter
 RandomRegistry
\family default
 are only visible within this scope.
 Once the 
\family typewriter
with
\family default
 scope is left, the original
\family typewriter
 Random
\family default
 object is restored.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

List<Genotype<DoubleGene>> genotypes =
\end_layout

\begin_layout Plain Layout

    RandomRegistry.with(new Random(123), r -> {
\end_layout

\begin_layout Plain Layout

        Genotype.of(DoubleChromosome.of(0.0, 100.0, 10))
\end_layout

\begin_layout Plain Layout

            .instances()
\end_layout

\begin_layout Plain Layout

            .collect(Collectors.toList())
\end_layout

\begin_layout Plain Layout

    });
\end_layout

\end_inset

With the previous listing, a random, but reproducible, list of genotypes
 is created.
 This might be useful while testing your application or when you want to
 evaluate the 
\family typewriter
Evolution\SpecialChar \-
Stream
\family default
 several times with the same initial population.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

Engine<DoubleGene, Double> engine = ...;
\end_layout

\begin_layout Plain Layout

// Create a new evolution stream with the given
\end_layout

\begin_layout Plain Layout

// initial genotypes.
\end_layout

\begin_layout Plain Layout

Phenotype<DoubleGene, Double> best = engine.stream(genotypes)
\end_layout

\begin_layout Plain Layout

    .limit(10)
\end_layout

\begin_layout Plain Layout

    .collect(EvolutionResult.toBestPhenotype());
\end_layout

\end_inset

The example above uses the generated genotypes for creating the 
\family typewriter
Evolution\SpecialChar \-
Stream
\family default
.
 Each created stream uses the same starting population, but will, most likely,
 create a different result.
 This is because the stream evaluation is still non-deterministic.
\end_layout

\begin_layout Standard
\begin_inset Box Shaded
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "90text%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Plain Layout

\family sans
Setting the PRNG to a Random object with a defined seed has the effect,
 that every evolution 
\emph on
stream
\emph default
 will produce the same result---in a single threaded environment.
\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The parallel nature of the GA implementation requires the creation of streams
 
\begin_inset Formula $t_{i,j}$
\end_inset

 of random numbers which are statistically independent, where the streams
 are numbered with 
\begin_inset Formula $j=1,2,3,...,p$
\end_inset

.
 
\begin_inset Formula $p$
\end_inset

 denotes the number of processes.
 We expect statistical independence between the streams as well.
 The used PRNG should enable the GA to
\emph on
 play fair
\emph default
, which means that the outcome of the GA is strictly independent from the
 underlying hardware and the number of parallel processes or threads.
 This is essential for reproducing results in parallel environments where
 the number of parallel tasks may vary from run to run.
\end_layout

\begin_layout Standard
\begin_inset Box Shaded
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "90text%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Plain Layout

\family sans
The
\emph on
 Fair Play
\emph default
 property of a PRNG guarantees that the quality of the genetic algorithm
 (evolution stream) does not depend on the degree of parallelization.
\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
When the 
\family typewriter
Random
\family default
 engine is used in an multi-threaded environment, there must be a way to
 parallelize the sequential PRNG.
 Usually this is done by taking the elements of the sequence of pseudo-random
 numbers and distribute them among the threads.
 There are essentially four different parallelizations techniques used in
 practice:
\emph on
 Random seeding
\emph default
,
\emph on
 Parameterization
\emph default
,
\emph on
 Block splitting
\emph default
 and
\emph on
 Leapfrogging
\emph default
.
\end_layout

\begin_layout Paragraph

\series bold
Random seeding
\series default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
PRNG!Random seeding
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Random seeding
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Every thread uses the same kind of PRNG but with a different seed.
 This is the default strategy used by the
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 library.
 The
\family typewriter
 Random\SpecialChar \-
Registry
\family default
 is initialized with the
\family typewriter
 Thread\SpecialChar \-
Local\SpecialChar \-
Random
\family default
 class from the
\family typewriter
 ja\SpecialChar \-
va\SpecialChar \-
.\SpecialChar \-
util.\SpecialChar \-
concurrent
\family default
 package.
 Random seeding works well for the most problems but without theoretical
 foundation.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
This is also expressed by Donald Knuth’s advice: 
\begin_inset Quotes ald
\end_inset

Random number generators should not be chosen at random.
\begin_inset Quotes ard
\end_inset


\end_layout

\end_inset

 If you assume that this strategy is responsible for some
\emph on
 non
\emph default
-reproducible results, consider using the
\family typewriter
 LCG64\SpecialChar \-
Shift\SpecialChar \-
Random
\family default
 PRNG instead, which uses
\emph on
 block splitting
\emph default
 as parallelization strategy.
\end_layout

\begin_layout Paragraph

\series bold
Parameterization
\series default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
PRNG!Parameterization
\end_layout

\end_inset


\end_layout

\begin_layout Standard
All threads uses the same kind of PRNG but with different parameters.
 This requires the PRNG to be parameterizable, which is not the case for
 the Random object of the JDK.
 You can use the
\family typewriter
 LCG64\SpecialChar \-
Shift\SpecialChar \-
Random
\family default
 class if you want to use this strategy.
 The theoretical foundation for these method is weak.
 In a massive parallel environment you will need a reliable set of parameters
 for every random stream, which are not trivial to find.
\end_layout

\begin_layout Paragraph

\series bold
Block splitting
\series default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
PRNG!Block splitting
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Block splitting
\end_layout

\end_inset


\end_layout

\begin_layout Standard
With this method each thread will be assigned a non-\SpecialChar \-
over\SpecialChar \-
lapping contiguous
 block of random numbers, which should be enough for the whole runtime of
 the process.
 If the number of threads is not known in advance, the length of each block
 should be chosen much larger then the maximal expected number of threads.
 This strategy is used when using the
\family typewriter
 LCG64\SpecialChar \-
Shift\SpecialChar \-
Random.\SpecialChar \-
Thread\SpecialChar \-
Local
\family default
 class
\emph on
.

\emph default
 This class assigns every thread a block of 
\begin_inset Formula $2^{56}\thickapprox7,2\cdot10^{16}$
\end_inset

 random numbers
\emph on
.

\emph default
 After 
\begin_inset Formula $128$
\end_inset

 threads, the blocks are recycled, but with changed seed.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../resources/graphic/BlockSplitting.eps
	width 80text%

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Parallelization-via-block"

\end_inset

Block splitting
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Paragraph

\series bold
Leapfrog
\series default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
PRNG!Leapfrog
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Leapfrog
\end_layout

\end_inset


\end_layout

\begin_layout Standard
With the leapfrog method each thread 
\begin_inset Formula $t\in\left[0,P\right)$
\end_inset

 only consumes the 
\begin_inset Formula $P^{th}$
\end_inset

 random number and jump ahead in the random sequence by the number of threads,
 
\begin_inset Formula $P$
\end_inset

.
 This method requires the ability to jump very quickly ahead in the sequence
 of random numbers by a given amount.
 Figure 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:Parallelization-via-leapfrogging"

\end_inset

 graphically shows the concept of the
\emph on
 leapfrog
\emph default
 method.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../resources/graphic/Leapfrog.eps
	width 80text%

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Parallelization-via-leapfrogging"

\end_inset

Leapfrogging
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Paragraph

\family typewriter
LCG64ShiftRandom
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Random!LCG64ShiftRandom
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
PRNG!
\family typewriter
LCG64ShiftRandom
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
LCG64ShiftRandom
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The
\family typewriter
 LCG64ShiftRandom
\family default
 class is a port of the
\family typewriter
 trng::\SpecialChar \-
lcg64_shift
\family default
 PRNG class of the 
\begin_inset CommandInset href
LatexCommand href
name "TRNG"
target "http://numbercrunch.de/trng/"

\end_inset


\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://numbercrunch.de/trng/
\end_layout

\end_inset


\end_layout

\end_inset

 library, implemented in C++.
\begin_inset CommandInset citation
LatexCommand cite
key "Tina2011"

\end_inset

 It implements additional methods, which allows to implement the
\emph on
 block splitting
\emph default
---and also the
\emph on
 leapfrog
\emph default
---method.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "extendedchars=true,language=Java,mathescape=true,numbers=left,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

public class LCG64ShiftRandom extends Random {
\end_layout

\begin_layout Plain Layout

    public void split(final int p, final int s);
\end_layout

\begin_layout Plain Layout

    public void jump(final long step);
\end_layout

\begin_layout Plain Layout

    public void jump2(final int s);
\end_layout

\begin_layout Plain Layout

    ...
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:LCG64ShiftRandom-class"

\end_inset

LCG64ShiftRandom class
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:LCG64ShiftRandom-class"

\end_inset

 shows the interface used for implementing the block splitting and leapfrog
 parallelizations technique.
 This methods have the following meaning:
\end_layout

\begin_layout Description

\family typewriter
split
\family default
 Changes the internal state of the PRNG in a way that future calls to
\family typewriter
 nextLong()
\family default
 will generated the 
\begin_inset Formula $s^{th}$
\end_inset

 sub-stream of 
\begin_inset Formula $p^{th}$
\end_inset

 sub-streams.
 
\begin_inset Formula $s$
\end_inset

 must be within the range of 
\begin_inset Formula $\left[0,p-1\right)$
\end_inset

.
 This method is used for parallelization via
\emph on
 leapfrogging
\emph default
.
\end_layout

\begin_layout Description

\family typewriter
jump
\family default
 Changes the internal state of the PRNG in such a way that the engine jumps
\begin_inset Formula $s$
\end_inset

 steps ahead.
 This method is used for parallelization via
\emph on
 block splitting
\emph default
.
\end_layout

\begin_layout Description

\family typewriter
jump2
\family default
 Changes the internal state of the PRNG in such a way that the engine jumps
\begin_inset Formula $2^{s}$
\end_inset

 steps ahead.
 This method is used for parallelization via
\emph on
 block splitting
\emph default
.
\end_layout

\begin_layout Paragraph
Runtime performance
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
PRNG!Performance
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Table 
\begin_inset CommandInset ref
LatexCommand vref
reference "tab:PRNG-performance"

\end_inset

 shows the random number
\family typewriter
 (int
\family default
,
\family typewriter
 long
\family default
,
\family typewriter
 float
\family default
 and
\family typewriter
 double
\family default
) generation speed for the different PRNG implementations.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Measured on a Intel(R) Core(TM) i5-3427U CPU @ 1.80GHz with Java(TM) SE Runtime
 Environment (build 1.8.0_05-b13)---Java HotSpot(TM) 64-Bit Server VM (build
 25.5-b02, mixed mode)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="5">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0pt">
<column alignment="right" valignment="top" width="0pt">
<column alignment="right" valignment="top" width="0pt">
<column alignment="right" valignment="top" width="0pt">
<column alignment="right" valignment="top" width="0pt">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
int
\family default
/s
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
long
\family default
/s
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
float
\family default
/s
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
double
\family default
/s
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
Random
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $70\cdot10^{6}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $35\cdot10^{6}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $70\cdot10^{6}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $35\cdot10^{6}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
ThreadLocalRandom
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $253\cdot10^{6}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $365\cdot10^{6}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $249\cdot10^{6}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $229\cdot10^{6}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
LCG64ShiftRandom
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $266\cdot10^{6}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $270\cdot10^{6}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $227\cdot10^{6}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $233\cdot10^{6}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:PRNG-performance"

\end_inset

Performance of various PRNG implementations.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset

The default PRNG used by the
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 has the best runtime performance behavior (for generating
\family typewriter
 int
\family default
 values).
\end_layout

\begin_layout Subsection
Serialization
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Serialization
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sub:Serialization"

\end_inset


\end_layout

\begin_layout Standard

\family sans
\series bold
\shape smallcaps
Jenetics
\family default
\series default
\shape default
 supports serialization for a number of classes, most of them are located
 in the
\family typewriter
 org.jenetics
\family default
 package:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{multicols}{2}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
BitGene
\end_layout

\begin_layout Itemize

\family typewriter
BitChromosome
\end_layout

\begin_layout Itemize

\family typewriter
CharacterGene
\end_layout

\begin_layout Itemize

\family typewriter
CharacterChromosome
\end_layout

\begin_layout Itemize
IntegerGene
\end_layout

\begin_layout Itemize
IntegerChromosome
\end_layout

\begin_layout Itemize
LongGene
\end_layout

\begin_layout Itemize

\family typewriter
LongChomosome
\end_layout

\begin_layout Itemize

\family typewriter
DoubleGene
\end_layout

\begin_layout Itemize

\family typewriter
DoubleChromosome
\end_layout

\begin_layout Itemize

\family typewriter
EnumGene
\end_layout

\begin_layout Itemize

\family typewriter
PermutationChromosome
\end_layout

\begin_layout Itemize

\family typewriter
Genotype
\end_layout

\begin_layout Itemize

\family typewriter
Phenotype
\end_layout

\begin_layout Itemize

\family typewriter
Population
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{multicols}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
With the serialization mechanism you can write a population to disk and
 load it into an new evolution stream at a later time.
 It can also be used to transfer populations to evolution engines, running
 on different hosts, over a network link.
 The
\family typewriter
 IO
\family default
 class, located in the
\family typewriter
 org.jenetics.util
\family default
 package, supports native Java serialization and JAXB XML serialization.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

// Creating result population.
\end_layout

\begin_layout Plain Layout

EvolutionResult<DoubleGene, Double> result = stream
\end_layout

\begin_layout Plain Layout

    .collect(toBestEvolutionResult());
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Writing the population to disk.
\end_layout

\begin_layout Plain Layout

final File file = new File("population.xml");
\end_layout

\begin_layout Plain Layout

IO.jaxb.write(result.getPopulation(), file);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Reading the population from disk.
\end_layout

\begin_layout Plain Layout

Population<DoubleGene, Double> population =
\end_layout

\begin_layout Plain Layout

    (Population<DoubleGene, Double>)IO.jaxb.read(file);
\end_layout

\begin_layout Plain Layout

EvolutionStream<DoubleGene, Double> stream = Engine
\end_layout

\begin_layout Plain Layout

    .build(ff, gtf)
\end_layout

\begin_layout Plain Layout

    .stream(population, 1);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The following listing shows the XML serialization of a population which
 consists of genotypes as shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Genotype-structure"

\end_inset

 on page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "sub:Genotype"

\end_inset

; only the first phenotype is shown.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstset{basicstyle=
\backslash
tiny
\backslash
ttfamily}
\end_layout

\begin_layout Plain Layout


\backslash
lstinputlisting[language=XML]{../resources/code/population.xml}
\end_layout

\begin_layout Plain Layout


\backslash
lstset{basicstyle=
\backslash
footnotesize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
When serializing a whole population the fitness function and fitness scaler
 are not part of the serialized XML file.
 If a GA is initialized with a previously serialized population, the GA's
 current fitness function and fitness scaler are used for
\emph on
 re
\emph default
-calculating the fitness values.
 
\end_layout

\begin_layout Subsection
Utility classes
\end_layout

\begin_layout Standard
The
\family typewriter
 org.jenetics.util
\family default
 package of the library contains utility classes which are also very important
 for the GA implementation.
\end_layout

\begin_layout Paragraph

\family typewriter
org.jenetics.util.Seq
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Seq
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Most notable are the
\family typewriter
 Seq
\family default
 interfaces and its implementation.
 They are used, among others, in the
\family typewriter
 Chromosome
\family default
 and
\family typewriter
 Genotype
\family default
 classes and holds the
\family typewriter
 Gene
\family default
s and
\family typewriter
 Chromosome
\family default
s, respectively.
 The Seq interface itself represents a fixed-sized, ordered sequence of
 elements.
 It is an abstraction over the Java build-in
\emph on
 array
\emph default
-type, but much safer to use for
\emph on
 generic
\emph default
 elements, because there are no casts needed when using
\emph on
 nested
\emph default
 generic types.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../resources/model/SeqModel.eps
	lyxscale 75
	width 80col%

\end_inset


\begin_inset Caption

\begin_layout Plain Layout

\family typewriter
\begin_inset CommandInset label
LatexCommand label
name "fig:Seq-class-diagram"

\end_inset

Seq
\family default
 class diagram
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:Seq-class-diagram"

\end_inset

 shows the
\family typewriter
 Seq
\family default
 class diagram with their most important methods.
 The interfaces
\family typewriter
 MSeq
\family default
 and
\family typewriter
 ISeq
\family default
 are mutable, respectively immutable specializations of the basis interface.
 Creating instances of the
\family typewriter
 Seq
\family default
 interfaces is possible via the static factory methods of the interfaces.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

// Create 'different' sequences.
\end_layout

\begin_layout Plain Layout

final Seq<Integer> a1 = Seq.of(1, 2, 3);
\end_layout

\begin_layout Plain Layout

final MSeq<Integer> a2 = MSeq.of(1, 2, 3);
\end_layout

\begin_layout Plain Layout

final ISeq<Integer> a3 = MSeq.of(1, 2, 3).toISeq();
\end_layout

\begin_layout Plain Layout

final MSeq<Integer> a4 = a3.copy();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// The 'equals' method performs element-wise comparison.
\end_layout

\begin_layout Plain Layout

assert(a1.equals(a2) && a1 != a2);
\end_layout

\begin_layout Plain Layout

assert(a2.equals(a3) && a2 != a3);
\end_layout

\begin_layout Plain Layout

assert(a3.equals(a4) && a3 != a4);
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset

 How to create instances of the three
\family typewriter
 Seq
\family default
 types is shown in the listing above.
 The
\family typewriter
 Seq
\family default
 classes also allows a more
\emph on
 functional
\emph default
 programming style.
 For a full method description refer to the 
\begin_inset CommandInset href
LatexCommand href
name "Javadoc"
target "http://jenetics.sourceforge.net/javadoc/index.html"

\end_inset

.
\end_layout

\begin_layout Paragraph

\family typewriter
org.jenetics.stat
\end_layout

\begin_layout Standard
This package contains classes and collectors for calculating statistical
 moments.
\end_layout

\begin_layout Section
Extending
\family sans
\series bold
\shape smallcaps
 Jenetics
\end_layout

\begin_layout Standard
The
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 library was designed to give you a great flexibility in transforming your
 problem into a structure that can be solved by an GA.
 It also comes with different implementations for the base data-types (genes
 and chromosomes) and genetic operators (alterers and selectors).
 If it is still some functionality missing, this section describes how you
 can extend the existing classes.
 Most of the
\shape italic
 extensible
\shape default
 classes are defined by an interface and have an abstract implementation
 which makes it easier to extend it.
\end_layout

\begin_layout Subsection
Genes
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Gene
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sub:Genes"

\end_inset


\end_layout

\begin_layout Standard
Genes are the starting point in the class hierarchy.
 They hold the actual information, the alleles, of your problem domain.
 Beside the
\emph on
 classical
\emph default
 bit-gene,
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 comes with gene implementations for numbers (double- and long values),
 characters and enumeration types.
\end_layout

\begin_layout Standard
For implementing your own gene type you have to implement the
\family typewriter
 Gene
\family default
 interface with three methods: (1) the
\family typewriter
 getAllele
\family default
()
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Allele
\end_layout

\end_inset

 method which will return the wrapped data, (2) the
\family typewriter
 newInstance
\family default
 method for creating new, random instances of the gene---must be of the
 same type and have the same constraint---and (3) the
\family typewriter
 isValid()
\family default
 method which checks if the gene fulfill the expected constraints.
 The gene constraint might be violated after mutation and/or recombination.
 If you want to implement a new number-gene, e.
\begin_inset space ~
\end_inset

g.
 a gene which holds complex values, you may want extend it from the abstract
\family typewriter
 NumericGene
\family default
 class.
 Every gene extends the
\family typewriter
 Serializable
\family default
 interface.
 For
\emph on
 normal
\emph default
 genes there is no more work to do for using the Java serialization mechanism.
 
\end_layout

\begin_layout Subsection
Chromosomes
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Chromosome
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A new gene type normally needs a corresponding chromosome implementation.
 The following listing shows the
\family typewriter
 Chromosome
\family default
 interface and the methods that must be implemented.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

public interface Chromosome<G extends Gene<?, G>>
\end_layout

\begin_layout Plain Layout

	extends Factory<Chromosome<G>>, Iterable<G>, Verifiable,
\end_layout

\begin_layout Plain Layout

            Immutable, Serializable
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

    public Chromosome<G> newInstance(ISeq<G> genes);
\end_layout

\begin_layout Plain Layout

    public G getGene();
\end_layout

\begin_layout Plain Layout

    public G getGene(int index);
\end_layout

\begin_layout Plain Layout

    public ISeq<G> toSeq();
\end_layout

\begin_layout Plain Layout

    public int length();
\end_layout

\begin_layout Plain Layout

}
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Chromosome-interface"

\end_inset


\family typewriter
Chromosome
\family default
 interface
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The most important part of a chromosome is the factory method
\family typewriter
 new\SpecialChar \-
Instance
\family default
, which lets the GA create a new chromosome instance from a sequence of
 genes.
 This method is used by the alterers when creating new, combined chromosomes.
 The other methods should be self-explanatory.
 The chromosome has the same serialization mechanism as the gene.
 For the minimal case it extends the
\family typewriter
 Serializable
\family default
 interface.
\end_layout

\begin_layout Subsection
Selectors
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Selector
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If you want to implement your own selection strategy you only have to implement
 the
\family typewriter
 Selector
\family default
 interface with the
\family typewriter
 select
\family default
 method.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

public interface Selector<
\end_layout

\begin_layout Plain Layout

    G extends Gene<?, G>,
\end_layout

\begin_layout Plain Layout

    C extends Comparable<? super C>
\end_layout

\begin_layout Plain Layout

>
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

    public Population<G, C> select(
\end_layout

\begin_layout Plain Layout

        Population<G, C> population,
\end_layout

\begin_layout Plain Layout

        int count,
\end_layout

\begin_layout Plain Layout

        Optimize opt
\end_layout

\begin_layout Plain Layout

    );
\end_layout

\begin_layout Plain Layout

}
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Selector-interface"

\end_inset


\family typewriter
Selector
\family default
 interface
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The first parameter is the original
\family typewriter
 population
\family default
 from which the
\emph on
 sub
\emph default
-population is selected.
 The second parameter,
\family typewriter
count
\family default
, is the number of individuals of the returned sub-population.
 Depending on the selection algorithm, it is possible that the sub-population
 contains more elements than the original one.
 The last parameter,
\family typewriter
 opt
\family default
, determines the optimization strategy which must be used by the selector.
 This is exactly the point where it is decided whether the GA minimizes
 or maximizes the fitness function.
\end_layout

\begin_layout Standard
Before implementing a selector from scratch, consider to extend your selector
 from the
\family typewriter
 ProbabilitySelector
\family default
 (or any other available selector implementation).
 It is worth the effort to try to express your selection strategy in terms
 of selection property 
\begin_inset Formula $P(i)$
\end_inset

.
\end_layout

\begin_layout Subsection
Alterers
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Alterer
\end_layout

\end_inset


\end_layout

\begin_layout Standard
For implementing a new alterer class it is necessary to implement the
\family typewriter
 Alterer
\family default
 interface.
 You might do this if your new gene type needs a special kind of alterer
 not available in the
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 project.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

public interface Alterer<G extends Gene<?, G>> {
\end_layout

\begin_layout Plain Layout

    public <C extends Comparable<? super C>> int alter(
\end_layout

\begin_layout Plain Layout

        Population<G, C> population,
\end_layout

\begin_layout Plain Layout

        int generation
\end_layout

\begin_layout Plain Layout

    );
\end_layout

\begin_layout Plain Layout

}
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Alterer-interface"

\end_inset


\family typewriter
Alterer
\family default
 interface
\end_layout

\end_inset


\end_layout

\end_inset

The first parameter of the
\family typewriter
 alter
\family default
 method is the
\family typewriter
 population
\family default
 which has to be altered.
 Since the the
\family typewriter
 Population
\family default
 class is mutable, the altering is performed in place.
 The second parameter is the
\family typewriter
 generation
\family default
 of the newly created individuals and the return value is the number of
 genes that has been altered.
\end_layout

\begin_layout Subsection
Statistics/Collectors
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Statistics
\end_layout

\end_inset


\end_layout

\begin_layout Standard
During the developing phase of an application which uses the 
\family sans
\series bold
\shape smallcaps
Jenetics
\family default
\series default
\shape default
 library additional statistical data about the evolution process is crucial.
 Such data can help to optimize the parametrization of the evolution Engine.
 A good starting point is to use the 
\family typewriter
Evolution\SpecialChar \-
Statistics
\family default
 class in the 
\family typewriter
org.\SpecialChar \-
jenetics.\SpecialChar \-
engine
\family default
 package.
 The basic usage of this class is described in xxx.
\end_layout

\begin_layout Standard
If the data in the EvolutionStatistics class doesn't fit your needs, you
 simply have to write your own statistics class.
 It is not possible to derive from the existing Evolution\SpecialChar \-
Statistics class.
 This is not a real restriction, since you still can use the class by delegation.
 Just implement the Java 
\family typewriter
Consumer<\SpecialChar \-
Evolution\SpecialChar \-
Result<G, C>\SpecialChar \-
>
\family default
 interface.
\end_layout

\begin_layout Section
Advanced configurations
\end_layout

\begin_layout Standard
This section describes some advanced topics when setting up an evolution
 engine or stream.
\end_layout

\begin_layout Subsection
Encoding
\begin_inset CommandInset label
LatexCommand label
name "sub:Encoding"

\end_inset


\end_layout

\begin_layout Standard
This section presents some encoding examples for common problems.
 The encoding should be a complete and minimal expression of a solution
 to the problem.
 An encoding is complete if it contains enough information to represent
 every solution to the problem.
 An minimal encoding contains only the information needed to represent a
 solution to the problem.
 If an encoding contains more information than is needed to uniquely identify
 solutions to the problem, the search space will be larger than necessary.
 
\end_layout

\begin_layout Standard
Whenever possible, the encoding should not be able to represent infeasible
 solutions.
 If a genotype can represent an infeasible solution, care must be taken
 in the fitness function to give partial credit to the genotype for its
 
\begin_inset Quotes ald
\end_inset

good
\begin_inset Quotes ard
\end_inset

 genetic material while sufficiently penalizing it for being infeasible.
 Implementing a specialized 
\family typewriter
Chromosome
\family default
, which won't create invalid encodings can be a solution to this problem.
 In general, it is much more desirable to design a representation that can
 only represent valid solutions so that the fitness function measures only
 fitness, not validity.
 An encoding that includes invalid individuals enlarges the search space
 and makes the search more costly.
\end_layout

\begin_layout Subsubsection
Real function
\begin_inset CommandInset label
LatexCommand label
name "sub:Real-function"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Encoding!Real function
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\family sans
\series bold
\shape smallcaps
Jenetics
\family default
\series default
\shape default
 contains three different numeric gene and chromosome implementations, which
 can be used to encode a real function, 
\begin_inset Formula $f:\,\mathbb{R}\rightarrow\mathbb{R}$
\end_inset

: 
\end_layout

\begin_layout Itemize

\family typewriter
IntegerGene
\family default
/
\family typewriter
Chromosome
\family default
, 
\end_layout

\begin_layout Itemize

\family typewriter
LongGene/Chromosome
\family default
 and 
\end_layout

\begin_layout Itemize

\family typewriter
DoubleGene
\family default
/
\family typewriter
Chromosome
\family default
.
\end_layout

\begin_layout Standard
It is quite easy to encode a real function.
 Only the minimum and maximum value of the function domain must be defined.
 The 
\family typewriter
Double\SpecialChar \-
Chromosome
\family default
 of length 1 is then wrapped into a 
\family typewriter
Genotype
\family default
.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

Genotype.of(
\end_layout

\begin_layout Plain Layout

    DoubleChromosome.of(min, max, 1)
\end_layout

\begin_layout Plain Layout

);
\end_layout

\end_inset

Decoding the double value from the Genotype is also straight forward.
 Just get the first gene from the first chromosome, with the 
\family typewriter
getGene()
\family default
 method, and convert it to a 
\family typewriter
double
\family default
.
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

static double toDouble(final Genotype<DoubleGene> gt) {
\end_layout

\begin_layout Plain Layout

    return gt.getGene().doubleValue();
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset

When the 
\family typewriter
Genotype
\family default
 only contains 
\emph on
scalar
\emph default
 chromosomes
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Scalar chromosomes contain only one gene.
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Chromosome!scalar
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Scalar chromosome
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Genotype!scalar
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Scalar genotype
\end_layout

\end_inset

, it should be clear, that it can't be altered by every 
\family typewriter
Alterer
\family default
.
 That means, that non of the 
\family typewriter
Crossover
\family default
 alterers will be able to create modified 
\family typewriter
Genotype
\family default
s.
 For 
\emph on
scalars
\emph default
 the appropriate alterers would be the 
\family typewriter
MeanAlterer
\family default
, 
\family typewriter
GaussianAlterer
\family default
 and 
\family typewriter
Mutator
\family default
.
\end_layout

\begin_layout Standard
\begin_inset Box Shaded
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "90text%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Plain Layout

\family sans
\emph on
Scalar
\emph default
 
\family typewriter
Chromosome
\family sans
s and/\SpecialChar \-
or 
\family typewriter
Genotype
\family sans
s can only be altererd by 
\family typewriter
MeanAlterer
\family sans
, 
\family typewriter
GaussianAlterer
\family sans
 and 
\family typewriter
Mutator
\family sans
 classes.
\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Scalar function
\begin_inset CommandInset label
LatexCommand label
name "sub:Scalar-function"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Encoding!Scalar function
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Optimizing a function 
\begin_inset Formula $f\left(x_{1},...,x_{n}\right)$
\end_inset

 of one or more variable whose range is one-dimensional, we have two possibiliti
es for the Genotype encoding.
\begin_inset CommandInset citation
LatexCommand cite
key "MathWorld_Weisstein"

\end_inset

 For the 
\emph on
first
\emph default
 encoding we expect that all variables, 
\begin_inset Formula $x_{i}$
\end_inset

, have the same minimum and maximum value.
 In this case we can simply create a 
\family typewriter
Genotype
\family default
 with a 
\family typewriter
\emph on
Numeric
\emph default
\SpecialChar \-
Chromosome
\family default
 of the desired length 
\begin_inset Formula $n$
\end_inset

.
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

Genotype.of(
\end_layout

\begin_layout Plain Layout

    DoubleChromosome.of(min, max, n)
\end_layout

\begin_layout Plain Layout

);
\end_layout

\end_inset

The decoding of the Genotype requires a cast of the first Chromosome to
 a DoubleChromosome.
 With a call to the 
\family typewriter
DoubleChromosome.\SpecialChar \-
toArray()
\family default
 method we return the variables 
\begin_inset Formula $\left(x_{1},...,x_{n}\right)$
\end_inset

 as 
\family typewriter
double[]
\family default
 array.
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

static double[] toScalars(final Genotype<DoubleGene> gt) {
\end_layout

\begin_layout Plain Layout

    return ((DoubleChromosome)gt.getChromosome()).toArray();
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset

With the 
\emph on
first
\emph default
 encoding you have the possibility use all available alterers, including
 all 
\family typewriter
Crossover
\family default
 alterer classes.
\end_layout

\begin_layout Standard
The 
\emph on
second
\emph default
 encoding 
\emph on
must
\emph default
 be used if the minimum and maximum value of the variables 
\begin_inset Formula $x_{i}$
\end_inset

 can't be the same for all 
\begin_inset Formula $i$
\end_inset

.
 For the different domains, each variable 
\begin_inset Formula $x_{i}$
\end_inset

 is represented by a 
\family typewriter
\emph on
Numeric
\emph default
\SpecialChar \-
Chromosome
\family default
 with length one.
 The final 
\family typewriter
Genotype
\family default
 will consist of 
\begin_inset Formula $n$
\end_inset

 
\family typewriter
Chromosome
\family default
s with length one.
 
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

Genotype.of(
\end_layout

\begin_layout Plain Layout

    DoubleChromosome.of(min1, max1, 1),
\end_layout

\begin_layout Plain Layout

    DoubleChromosome.of(min2, max2, 1),
\end_layout

\begin_layout Plain Layout

    ...
\end_layout

\begin_layout Plain Layout

    DoubleChromosome.of(minn, maxn, 1)
\end_layout

\begin_layout Plain Layout

);
\end_layout

\end_inset

With the help of the new Java streaming API, the decoding of the Genotype
 can be done in a view lines.
 The 
\family typewriter
Double\SpecialChar \-
Chromosome
\family default
 stream, which is created from the chromosome 
\family typewriter
Seq
\family default
, is first mapped to 
\family typewriter
double
\family default
 values and then collected into an array.
 
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

static double[] toScalars(final Genotype<DoubleGene> gt) {
\end_layout

\begin_layout Plain Layout

    return gt.toSeq().stream()
\end_layout

\begin_layout Plain Layout

        .mapToDouble(c -> c.getGene().doubleValue())
\end_layout

\begin_layout Plain Layout

        .toArray();
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset

As already mentioned, with the use of scalar chromosomes we can only use
 the 
\family typewriter
MeanAlterer
\family default
, 
\family typewriter
GaussianAlterer
\family default
 or 
\family typewriter
Mutator
\family default
 alterer class.
\end_layout

\begin_layout Subsubsection
Vector function
\begin_inset CommandInset label
LatexCommand label
name "sub:Vector-function"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Encoding!Vector function
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A function 
\begin_inset Formula $f\left(X_{1},...,X_{n}\right)$
\end_inset

, of one to 
\begin_inset Formula $n$
\end_inset

 variables whose range is 
\begin_inset Formula $m$
\end_inset

-dimensional, is encoded by 
\begin_inset Formula $m$
\end_inset

 
\family typewriter
Double\SpecialChar \-
Chromosome
\family default
s of length 
\begin_inset Formula $n$
\end_inset

.
\begin_inset CommandInset citation
LatexCommand cite
key "MathWorld_Weisstein2"

\end_inset

 The domain--minimum and maximum values--of one variable 
\begin_inset Formula $X_{i}$
\end_inset

 are the same in this encoding.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

Genotype.of(
\end_layout

\begin_layout Plain Layout

    DoubleChromosome.of(min1, max1, m),
\end_layout

\begin_layout Plain Layout

    DoubleChromosome.of(min2, max2, m),
\end_layout

\begin_layout Plain Layout

    ...
\end_layout

\begin_layout Plain Layout

    DoubleChromosome.of(minn, maxn, m)
\end_layout

\begin_layout Plain Layout

);
\end_layout

\end_inset

The decoding of the vectors is quite easy with the help of the Java streaming
 API.
 In the first 
\family typewriter
map
\family default
 we have to cast the 
\family typewriter
Chromosome<DoubleGene>
\family default
 object to the actual 
\family typewriter
DoubleChromosome
\family default
.
 The second 
\family typewriter
map
\family default
 then converts each 
\family typewriter
Double\SpecialChar \-
Chromosome
\family default
 to an 
\family typewriter
double[]
\family default
 array, which is collected to an 
\begin_inset Formula $2$
\end_inset

-dimensional 
\family typewriter
double[
\emph on
n
\emph default
][
\emph on
m
\emph default
]
\family default
 array afterwards.
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

static double[][] toVectors(final Genotype<DoubleGene> gt) {
\end_layout

\begin_layout Plain Layout

    return gt.toSeq().stream()
\end_layout

\begin_layout Plain Layout

        .map(DoubleChromosome.class::cast)
\end_layout

\begin_layout Plain Layout

        .map(DoubleChromosome::toArray)
\end_layout

\begin_layout Plain Layout

        .toArray(double[][]::new);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
For the special case of 
\begin_inset Formula $n=1$
\end_inset

, the decoding of the Genotype can be simplified to the decoding we introduced
 for scalar functions in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Scalar-function"

\end_inset

.
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

static double[] toVector(final Genotype<DoubleGene> gt) {
\end_layout

\begin_layout Plain Layout

    return ((DoubleChromosome)gt.getChromosome()).toArray();
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Affine transformation
\begin_inset CommandInset label
LatexCommand label
name "sub:Affine-transformation"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Encoding!Affine transformation
\end_layout

\end_inset


\end_layout

\begin_layout Standard
An affine transformation
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://en.wikipedia.org/wiki/Affine_transformation
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://mathworld.wolfram.com/AffineTransformation.html
\end_layout

\end_inset


\end_layout

\end_inset

 is usually performed by a matrix multiplication with a transformation matrix---
in a homogeneous coordinates system
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://en.wikipedia.org/wiki/Homogeneous_coordinates
\end_layout

\end_inset


\end_layout

\end_inset

.
 For a transformation in 
\begin_inset Formula $\mathbb{R}^{2}$
\end_inset

, we can define the matrix 
\begin_inset Formula $A$
\end_inset


\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://en.wikipedia.org/wiki/Transformation_matrix
\end_layout

\end_inset


\end_layout

\end_inset

:
\begin_inset Formula 
\begin{equation}
A=\left[\begin{array}{ccc}
a_{11} & a_{12} & a_{13}\\
a_{21} & a_{22} & a_{23}\\
0 & 0 & 1
\end{array}\right].\label{eq:Transformation matrix}
\end{equation}

\end_inset

 A simple representation can be done by creating a 
\family typewriter
Genotype
\family default
 which contains two 
\family typewriter
DoubleChromosome
\family default
s with a length of 
\begin_inset Formula $3$
\end_inset

.
 
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

Genotype.of(
\end_layout

\begin_layout Plain Layout

    DoubleChromosome.of(min, max, 3),
\end_layout

\begin_layout Plain Layout

    DoubleChromosome.of(min, max, 3)
\end_layout

\begin_layout Plain Layout

);
\end_layout

\end_inset

The drawback with this kind of encoding is, that we will create a lot of
 
\emph on
invalid
\emph default
 (non-affine transformation matrices) during the evolution process, which
 must be detected and discarded.
 It is also difficult find the right parameters for the 
\emph on
min
\emph default
 and 
\emph on
max
\emph default
 values of the 
\family typewriter
DoubleChromosome
\family default
s.
\end_layout

\begin_layout Standard
A better approach will be to encode the transformation parameters instead
 of the transformation matrix.
 The affine transformation can be expressed by the following parameters:
\end_layout

\begin_layout Itemize
\begin_inset Formula $s_{x}$
\end_inset

 -- the scale factor in 
\begin_inset Formula $x$
\end_inset

 direction
\end_layout

\begin_layout Itemize
\begin_inset Formula $s_{y}$
\end_inset

 -- the scale factor in 
\begin_inset Formula $y$
\end_inset

 direction
\end_layout

\begin_layout Itemize
\begin_inset Formula $t_{x}$
\end_inset

 -- the offset in 
\begin_inset Formula $x$
\end_inset

 direction
\end_layout

\begin_layout Itemize
\begin_inset Formula $t_{y}$
\end_inset

 -- the offset in 
\begin_inset Formula $y$
\end_inset

 direction
\end_layout

\begin_layout Itemize
\begin_inset Formula $\theta$
\end_inset

 -- the rotation angle clockwise around origin
\end_layout

\begin_layout Itemize
\begin_inset Formula $k_{x}$
\end_inset

 -- shearing parallel to 
\begin_inset Formula $x$
\end_inset

 axis
\end_layout

\begin_layout Itemize
\begin_inset Formula $k_{y}$
\end_inset

 -- shearing parallel to 
\begin_inset Formula $y$
\end_inset

 axis
\end_layout

\begin_layout Standard
This parameters can then be represented by the following 
\family typewriter
Genotype
\family default
.
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

Genotype.of(
\end_layout

\begin_layout Plain Layout

    // Scale
\end_layout

\begin_layout Plain Layout

    DoubleChromosome.of(0.1, 5.0, 2),
\end_layout

\begin_layout Plain Layout

    // Translation
\end_layout

\begin_layout Plain Layout

    DoubleChromosome.of(-300.0, 300.0, 2),
\end_layout

\begin_layout Plain Layout

    // Rotation 			
\end_layout

\begin_layout Plain Layout

    DoubleChromosome.of(-Math.PI, Math.PI),
\end_layout

\begin_layout Plain Layout

    // Shear
\end_layout

\begin_layout Plain Layout

    DoubleChromosome.of(-0.5, 0.5, 2)
\end_layout

\begin_layout Plain Layout

);
\end_layout

\end_inset

This encoding ensures that no invalid 
\family typewriter
Genotype
\family default
 will be created during the evolution process, since the crossover will
 be only performed on the same kind of chromosome (same chromosome index).
 To convert the 
\family typewriter
Genotype
\family default
 back to the transformation matrix 
\begin_inset Formula $A$
\end_inset

, we can use the following equations:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray}
a_{11} & = & s_{x}\left(\left(1+k_{x}k_{y}\right)\cos\theta+k_{y}\sin\theta\right)\nonumber \\
a_{12} & = & s_{x}\left(k_{x}\cos\theta+\sin\theta\right)\nonumber \\
a_{13} & = & t_{x}\nonumber \\
a_{21} & = & s_{y}\left(-\left(1+k_{x}k_{y}\right)\sin\theta+k_{y}\cos\theta\right)\label{eq:Matrix parameters}\\
a_{22} & = & s_{y}\left(-k_{x}\sin\theta+\cos\theta\right)\nonumber \\
a_{23} & = & t_{y}\nonumber 
\end{eqnarray}

\end_inset

In Java code, the conversion from the 
\family typewriter
Genotype
\family default
 to the transformation matrix will look like this:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

static double[][] toMatrix(final Genotype<DoubleGene> gt) {
\end_layout

\begin_layout Plain Layout

    final double sx = gt.get(0, 0).doubleValue();
\end_layout

\begin_layout Plain Layout

    final double sy = gt.get(0, 1).doubleValue();
\end_layout

\begin_layout Plain Layout

    final double tx = gt.get(1, 0).doubleValue();
\end_layout

\begin_layout Plain Layout

    final double ty = gt.get(1, 1).doubleValue();
\end_layout

\begin_layout Plain Layout

    final double th = gt.get(2, 0).doubleValue();
\end_layout

\begin_layout Plain Layout

    final double kx = gt.get(3, 0).doubleValue();
\end_layout

\begin_layout Plain Layout

    final double ky = gt.get(3, 1).doubleValue();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    final double a11 = sx*((1 + kx*ky)*cos(th) + ky*sin(th));
\end_layout

\begin_layout Plain Layout

    final double a12 = sx*(kx*cos(th) + sin(th));
\end_layout

\begin_layout Plain Layout

    final double a21 = sy*(-(1 + kx*ky)*sin(th) + ky*cos(th));
\end_layout

\begin_layout Plain Layout

    final double a22 = sy*(-kx*sin(th) + cos(th));
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    return new double[][] {
\end_layout

\begin_layout Plain Layout

        {a11, a12, tx},
\end_layout

\begin_layout Plain Layout

        {a21, a22, ty},
\end_layout

\begin_layout Plain Layout

        {0.0, 0.0, 1.0}
\end_layout

\begin_layout Plain Layout

    };
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
For the introduced encoding all kind of alterers can be used.
 Since we have one scalar 
\family typewriter
DoubleChromosome
\family default
, the rotation angle 
\begin_inset Formula $\theta$
\end_inset

, it is recommended also to add an 
\family typewriter
MeanAlterer
\family default
 or 
\family typewriter
GaussianAlterer
\family default
 to the list of alterers.
\end_layout

\begin_layout Subsubsection
Graph
\end_layout

\begin_layout Standard
A graph can be represented in many different ways.
 The most known graph representation is the adjacency matrix.
 The following encoding examples uses adjacency matrices with different
 characteristics.
 
\end_layout

\begin_layout Paragraph
Undirected graph
\end_layout

\begin_layout Standard
In an undirected graph the edges between the vertices between have no direction.
 If there is a path between nodes 
\begin_inset Formula $i$
\end_inset

 and 
\begin_inset Formula $j$
\end_inset

, it is assumed that there is also path from 
\begin_inset Formula $j$
\end_inset

 to 
\begin_inset Formula $i$
\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../resources/graphic/UndirectGraph.eps
	lyxscale 80
	width 65text%

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Undirected-graph"

\end_inset

Undirected graph and adjacency matrix
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:Undirected-graph"

\end_inset

 shows an undirected graph and its corresponding matrix representation.
 Since the edges between the nodes have no direction, the values of the
 lower diagonal matrix are not taken into account.
 An application which optimizes an undirected graph has to ignore this part
 of the matrix.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
This property violates the 
\emph on
minimal
\emph default
 encoding requirement we mentioned at the beginning of section 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Encoding"

\end_inset

.
 For simplicity reason this will be ignored for the undirected graph encoding.
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final int n = 6;
\end_layout

\begin_layout Plain Layout

final Genotype<BitGene> gt = Genotype
\end_layout

\begin_layout Plain Layout

    .of(BitChromosome.of(n), n);
\end_layout

\end_inset

The code snippet above shows how to create an adjacency matrix for a graph
 with 
\begin_inset Formula $n=6$
\end_inset

 nodes.
 It creates a genotype which consists of 
\begin_inset Formula $n$
\end_inset

 
\family typewriter
Bit\SpecialChar \-
Chromosome
\family default
s of length 
\begin_inset Formula $n$
\end_inset

 each.
 Whether the node 
\begin_inset Formula $i$
\end_inset

 is connected to node 
\begin_inset Formula $j$
\end_inset

 can be easily checked by calling 
\family typewriter
gt\SpecialChar \-
.get(i-1, j-1)\SpecialChar \-
.booleanValue()
\family default
.
 For extracting the whole matrix as 
\family typewriter
int[]
\family default
 array, the following code can be used.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final int[][] array = gt.toSeq().stream()
\end_layout

\begin_layout Plain Layout

    .map(c -> c.toSeq().stream()
\end_layout

\begin_layout Plain Layout

        .mapToInt(BitGene::ordinal).toArray())
\end_layout

\begin_layout Plain Layout

    .toArray(int[][]::new);
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Directed graph
\end_layout

\begin_layout Standard
A directed graph (digraph) is a graph where the path between the nodes have
 a direction associated with them.
 The encoding of a directed graph looks exactly like the encoding of an
 undirected graph.
 This time the whole matrix is used and the second diagonal matrix is no
 longer ignored.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../resources/graphic/DirectGraph.eps
	lyxscale 80
	width 65text%

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Directed-graph"

\end_inset

Directed graph and adjacency matrix
\end_layout

\end_inset


\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:Directed-graph"

\end_inset

 shows the adjacency matrix of a digraph.
 This time the whole matrix is used for representing the graph.
\end_layout

\begin_layout Paragraph
Weighted directed graph
\end_layout

\begin_layout Standard
A weighted graph associates a weight (label) with every path in the graph.
 Weights are usually real numbers.
 They may be restricted to rational numbers or integers.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../resources/graphic/WeightedDirectGraph.eps
	lyxscale 80
	width 65text%

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Weighted-graph"

\end_inset

Weighted graph and adjacency matrix
\end_layout

\end_inset


\end_layout

\end_inset

The genotype creation...
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final int n = 6;
\end_layout

\begin_layout Plain Layout

final double min = -1;
\end_layout

\begin_layout Plain Layout

final double max = 20;
\end_layout

\begin_layout Plain Layout

final Genotype<DoubleGene> gt = Genotype
\end_layout

\begin_layout Plain Layout

    .of(DoubleChromosome.of(min, max, n), n);
\end_layout

\end_inset

Matrix extraction...
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final double[][] array = gt.toSeq().stream()
\end_layout

\begin_layout Plain Layout

    .map(DoubleChromosome.class::cast)
\end_layout

\begin_layout Plain Layout

    .map(DoubleChromosome::toArray)
\end_layout

\begin_layout Plain Layout

    .toArray(double[][]::new);
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Scheduling
\end_layout

\begin_layout Standard
How to encode the problem for finding the best schedule of lessons.
\end_layout

\begin_layout Subsection
Termination
\end_layout

\begin_layout Standard
Termination is the criterion by which the evolution stream decides whether
 to continue or truncate the stream.
 This section gives a deeper look into the different ways of terminating
 or truncating the evolution stream, respectively.
\end_layout

\begin_layout Subsubsection
Generation number
\end_layout

\begin_layout Standard
The simplest way for terminating the evolution process, is to define a maximal
 number of generations on the 
\family typewriter
EvolutionStream
\family default
.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final long MAX_GENERATIONS = 100;
\end_layout

\begin_layout Plain Layout

EvolutionStream<DoubleGene, Double> stream = engine.stream()
\end_layout

\begin_layout Plain Layout

    .limit(MAX_GENERATIONS);
\end_layout

\end_inset

This kind of termination method should always be applied, to guarantee the
 truncation of the evolution stream.
\end_layout

\begin_layout Subsubsection
Steady fitness
\end_layout

\begin_layout Standard
The steady fitness strategy truncates the evolution stream if its best fitness
 hasn't changed after a given number of generations.
 The predicate maintains an internal state, the number of generations with
 non increasing fitness, and must be created for every evolution stream.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final class SteadyFitnessLimit<C extends Comparable<? super C>> 	
\end_layout

\begin_layout Plain Layout

    implements Predicate<EvolutionResult<?, C>> 
\end_layout

\begin_layout Plain Layout

{ 	
\end_layout

\begin_layout Plain Layout

    private final int _generations;
\end_layout

\begin_layout Plain Layout

    private boolean _proceed = true;
\end_layout

\begin_layout Plain Layout

    private int _stable = 0;
\end_layout

\begin_layout Plain Layout

    private C _fitness;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    public SteadyFitnessLimit(final int generations) {
\end_layout

\begin_layout Plain Layout

        _generations = generations;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    @Override
\end_layout

\begin_layout Plain Layout

    public boolean test(final EvolutionResult<?, C> result) {
\end_layout

\begin_layout Plain Layout

        if (!_proceed) return false;
\end_layout

\begin_layout Plain Layout

        if (_fitness == null) {
\end_layout

\begin_layout Plain Layout

            _fitness = result.getBestFitness();
\end_layout

\begin_layout Plain Layout

            _stable = 1;
\end_layout

\begin_layout Plain Layout

		} else {
\end_layout

\begin_layout Plain Layout

            final Optimize opt = result.getOptimize();
\end_layout

\begin_layout Plain Layout

            if (opt.compare(_fitness, result.getBestFitness()) >= 0) {
\end_layout

\begin_layout Plain Layout

                _proceed = ++_stable <= _generations;
\end_layout

\begin_layout Plain Layout

            } else {
\end_layout

\begin_layout Plain Layout

                _fitness = result.getBestFitness();
\end_layout

\begin_layout Plain Layout

                _stable = 1;
\end_layout

\begin_layout Plain Layout

            }
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

        return _proceed;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Steady population
\end_layout

\begin_layout Subsubsection
Evolution time
\end_layout

\begin_layout Standard
A termination method that stops the evolution when the elapsed evolution
 time exceeds the user-specified max evolution time.
 By default, the evolution is not stopped until the evolution of the current
 generation has completed, but this behavior can be changed so that the
 evolution can be stopped within a generation.
\end_layout

\begin_layout Subsubsection
Fitness threshold
\end_layout

\begin_layout Standard
A termination method that stops the evolution when the best fitness in the
 current population becomes less than the user-specified fitness threshold
 and the objective is set to minimize the fitness.
 This termination method also stops the evolution when the best fitness
 in the current population becomes greater than the user-specified fitness
 threshold when the objective is to maximize the fitness.
\end_layout

\begin_layout Subsubsection
Fitness convergence
\end_layout

\begin_layout Standard
A termination method that stops the evolution when the fitness is deemed
 as converged.
 Two filters of different lengths are used to smooth the best fitness across
 the generations.
 When the smoothed best fitness from the long filter is less than a user-specifi
ed percentage away from the smoothed best fitness from the short filter,
 the fitness is deemed as converged and the evolution terminates.
\end_layout

\begin_layout Subsubsection
Population convergence
\end_layout

\begin_layout Standard
A termination method that stops the evolution when the population is deemed
 as converged.
 The population is deemed as converged when the average fitness across the
 current population is less than a user-specified percentage away from the
 best fitness of the current population.
\end_layout

\begin_layout Subsubsection
Gene convergence
\end_layout

\begin_layout Standard
A termination method that stops the evolution when a user-specified percentage
 of the genes that make up a chromosome are deemed as converged.
 A gene is deemed as converged when the average value of that gene across
 all of the chromosomes in the current population is less than a user-specified
 percentage away from the maximum gene value across the chromosomes.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Part*
Appendix
\end_layout

\begin_layout Section
Examples
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Examples
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This section contains some coding examples which should give you a feeling
 of how to use the
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 library.
 The given examples are complete, in the sense that they will compile and
 run and produce the given example output.
\end_layout

\begin_layout Standard
Running the examples delivered with the
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 library can be started with the
\family typewriter
 run-examples.sh
\family default
 script.
\end_layout

\begin_layout LyX-Code
$ ./run-examples.sh
\end_layout

\begin_layout Standard
Since the script uses JARs located in the build directory you have to build
 it with the
\family typewriter
 jar
\family default
\emph on
 Gradle
\emph default
 target first; see section 
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Build"

\end_inset

.
\end_layout

\begin_layout Subsection
Ones counting
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Examples!Ones counting
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Ones counting
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Ones counting is one of the simplest model-problem.
 It uses a binary chromosome and forms a classic genetic algorithm
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
In the classic genetic algorithm the problem is a maximization problem and
 the fitness function is positive.
 The domain of the fitness function is a bit-chromosome.
\end_layout

\end_inset

.
 The fitness of a Genotype is proportional to the number of ones.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinputlisting{../resources/code/OnesCounting.java}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The genotype in this example consists of one BitChromosome with a ones probabili
ty of 0.15.
 The altering of the offspring population is performed by mutation, with
 mutation probability of 0.55, and then by a single-point crossover, with
 crossover probability of 0.06.
 After creating the initial population, with the
\family typewriter
 ga.setup()
\family default
 call, 100 generations are evolved.
 The tournament selector is used for both, the offspring- and the survivor
 selection---this is the default selector.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
For the other default values (population size, maximal age, ...) have a look
 at the Javadoc:
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://jenetics.sourceforge.net/javadoc/index.html
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstset{basicstyle=
\backslash
scriptsize
\backslash
ttfamily}
\end_layout

\begin_layout Plain Layout


\backslash
lstinputlisting{../resources/code/OnesCounting.out}
\end_layout

\begin_layout Plain Layout


\backslash
lstset{basicstyle=
\backslash
footnotesize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The given example will print the overall timing statistics onto the console.
\end_layout

\begin_layout Subsection
Real function
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Examples!Real function
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Real function
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In this example we try to find the minimum value of the function
\begin_inset Formula 
\begin{equation}
f(x)=\cos\left(\frac{1}{2}+\sin\left(x\right)\right)\cdot\cos\left(x\right).\label{eq:Example-real-function}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../resources/graphic/RealFunction2D.eps
	lyxscale 70
	width 90text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Real-function-2D"

\end_inset

Real function 2D
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The graph of function 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:Example-real-function"

\end_inset

, in the range of 
\begin_inset Formula $\left[0,2\pi\right]$
\end_inset

, is shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Real-function-2D"

\end_inset

 and the listing beneath shows the GA implementation which will minimize
 the function.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinputlisting{../resources/code/RealFunction.java}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The GA works with 
\begin_inset Formula $1\times1$
\end_inset


\family typewriter
 DoubleChromosome
\family default
s whose values are restricted to the range 
\begin_inset Formula $[0,2\pi]$
\end_inset

.
 Without this restriction, the search space of the chromosome will be between
\family typewriter
 Double.MIN_VALUE
\family default
 and
\family typewriter
 Double.MAX_VALUE
\family default
.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstset{basicstyle=
\backslash
scriptsize
\backslash
ttfamily}
\end_layout

\begin_layout Plain Layout


\backslash
lstinputlisting{../resources/code/RealFunction.out}
\end_layout

\begin_layout Plain Layout


\backslash
lstset{basicstyle=
\backslash
footnotesize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The GA will generated an console output like above.
 The 
\emph on
exact
\emph default
 result of the function--for the given range--will be 
\begin_inset Formula $3.389,125,782,8907,939...$
\end_inset

 You can also see, that we reached the final result after 19 generations.
\end_layout

\begin_layout Subsection
0/1 Knapsack
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Examples!0/1 Knapsack
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
0/1 Knapsack
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In the knapsack problem
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://en.wikipedia.org/wiki/Knapsack_problem
\end_layout

\end_inset


\end_layout

\end_inset

 a set of items, together with it's size and value, is given.
 The task is to select a disjoint subset so that the total size does not
 exceed the knapsack size.
 For solving the 0/1 knapsack problem we define a
\family typewriter
 BitChromosome
\family default
, one bit for each item.
 If the 
\begin_inset Formula $i^{th}$
\end_inset

 bit is set to one the 
\begin_inset Formula $i^{th}$
\end_inset

 item is selected.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinputlisting{../resources/code/Knapsack.java}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The console out put for the Knapsack GA will look like the listing beneath.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstset{basicstyle=
\backslash
scriptsize
\backslash
ttfamily}
\end_layout

\begin_layout Plain Layout


\backslash
lstinputlisting{../resources/code/Knapsack.out}
\end_layout

\begin_layout Plain Layout


\backslash
lstset{basicstyle=
\backslash
footnotesize}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Traveling salesman
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Examples!Traveling salesman
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Traveling salesman
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Traveling Salesman problem
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://en.wikipedia.org/wiki/Travelling_salesman_problem
\end_layout

\end_inset


\end_layout

\end_inset

 is one of the classical problems in computational mathematics and it is
 the most notorious NP-complete problem.
 The goal is to find the shortest distance, or the path, with the least
 costs, between 
\begin_inset Formula $N$
\end_inset

 different cities.
 Testing all possible path for 
\begin_inset Formula $N$
\end_inset

 cities would lead to 
\begin_inset Formula $N!$
\end_inset

 checks to find the shortest one.
\end_layout

\begin_layout Standard
The following example uses a path where the cities are lying on a circle.
 That means, the optimal path will be a polygon.
 This makes it easier to check the quality of the found solution.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinputlisting{../resources/code/TravelingSalesman.java}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Traveling Salesman problem is a very good example which shows you how
 to solve combinatorial problems with an GA.

\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 contains several classes which will work very well with this kind of problems.
 Wrapping the base
\emph on
 type
\emph default
 into an
\family typewriter
 EnumGene
\family default
 is the first thing to do.
 In our example, every city has an unique number, that means we are wrapping
 an
\family typewriter
 Integer
\family default
 into an
\family typewriter
 EnumGene
\family default
.
 Creating a genotype for integer values is very easy with the factory method
 of the
\family typewriter
 PermutationChromosome
\family default
.
 For other data types you have to use one of the constructors of the permutation
 chromosome.
 As alterers, we are using a swap-mutator and a partially-matched crossover.
 These alterers guarantees that no invalid solutions are created---every
 city exists exactly once in the altered chromosomes.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstset{basicstyle=
\backslash
scriptsize
\backslash
ttfamily}
\end_layout

\begin_layout Plain Layout


\backslash
lstinputlisting{../resources/code/TravelingSalesman.out}
\end_layout

\begin_layout Plain Layout


\backslash
lstset{basicstyle=
\backslash
footnotesize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The listing above shows the output generated by our example.
 The last line represents the phenotype of the best solution found by the
 GA, which represents the traveling path.
 As you can see, the GA has found the shortest path, in reverse order.
\end_layout

\begin_layout Section
Build
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Build
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Installation
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Download
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sec:Build"

\end_inset


\end_layout

\begin_layout Standard
For building the
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 library from source, download the most recent, stable package version from
 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://sourceforge.net/projects/jenetics/files/latest/download
\end_layout

\end_inset

 and extract it to some build directory.
\end_layout

\begin_layout LyX-Code
$ unzip jenetics-<version>.zip -d <build\SpecialChar \-
dir>
\end_layout

\begin_layout Standard

\family typewriter
<version>
\family default
 denotes the actual
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 version and
\family typewriter
 <build\SpecialChar \-
dir>
\family default
 the actual build directory.
 Alternatively you can check out the latest--unstable--version from the
 Mercurial
\family typewriter
 default
\family default
 branch.
\end_layout

\begin_layout LyX-Code
$ hg clone https://fwilhelm@bitbucket.org/fwilhelm/jenetics
\backslash

\end_layout

\begin_layout LyX-Code
           <builddir>
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Mercurial repository
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Source code
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
# or
\end_layout

\begin_layout LyX-Code
$ hg clone http://hg.code.sf.net/p/jenetics/main
\backslash

\end_layout

\begin_layout LyX-Code
           <builddir>
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Mercurial repository
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Source code
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
# or
\end_layout

\begin_layout LyX-Code
$ git clone https://github.com/jenetics/jenetics.git
\backslash

\end_layout

\begin_layout LyX-Code
           <builddir>
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Git repository
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Source code
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\family sans
\series bold
\shape smallcaps
Jenetics
\family default
\series default
\shape default
 uses Gradle
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://gradle.org/downloads
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Build!Gradle
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Gradle
\end_layout

\end_inset

 as build system and organizes the source into
\emph on
 sub
\emph default
-projects (
\emph on
modules
\emph default
).
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
If you are calling the
\family typewriter
 gradlew
\begin_inset Index idx
status open

\begin_layout Plain Layout
Build!gradlew
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
gradlew
\end_layout

\end_inset


\family default
 script (instead of
\family typewriter
 gradle
\family default
), which are part of the downloaded package, the proper Gradle version is
 automatically downloaded and you don't have to install Gradle explicitly.
\end_layout

\end_inset

 Each
\emph on
 sub
\emph default
-project is located in it's own
\emph on
 sub
\emph default
-directory:
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
org.jenetics
\family default
\series default
: This project contains the source code and tests for the
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
\emph on
 core
\emph default
-module.
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
org.jenetics.example
\family default
\series default
: This project contains example code for the
\emph on
 ore
\emph default
-module.
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
org.jenetics.doc
\family default
\series default
: Contains the
\emph on
 code
\emph default
 of the web-site and
\emph on
 this
\emph default
 manual.
\end_layout

\begin_layout Standard
For building the library change into the
\family typewriter
 <build\SpecialChar \-
dir>
\family default
 directory (or one of the
\emph on
 module
\emph default
 directory) and call one of the available
\emph on
 tasks
\emph default
:
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
compileJava
\family default
\series default
:
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Compile
\end_layout

\end_inset

 Compiles the
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 sources and copies the class files to the
\family typewriter
 <build\SpecialChar \-
dir>\SpecialChar \slash{}
<module-dir>/build\SpecialChar \slash{}
classes/main
\family default
 directory.
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
test
\family default
\series default
: Compiles and executes the unit tests.
 The test results are printed onto the console and a test-report, created
 by
\emph on
 TestNG
\emph default
, is written to
\family typewriter
 <build\SpecialChar \-
dir>/<module-dir>
\family default
 directory.
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
javadoc
\family default
\series default
: Generates the API documentation.
 The Javadoc is stored in the
\family typewriter
 <build\SpecialChar \-
dir>/<module-dir>\SpecialChar \slash{}
build\SpecialChar \slash{}
docs
\family default
 directory
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
jar
\family default
\series default
: Compiles the sources and creates the JAR files.
 The artifacts are copied to the
\family typewriter
 <build\SpecialChar \-
dir>/<module-dir>\SpecialChar \slash{}
build\SpecialChar \slash{}
libs
\family default
 directory.
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
packaging
\family default
\series default
: Compiles the sources of all modules, creates the JAR files and the Javadoc
 and creates a complete library package---the very same which you can download
 from the home page.
 The build artifacts are copied into the
\family typewriter
 <build\SpecialChar \-
dir>\SpecialChar \slash{}
build/package/jenetics-<version> directory.
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
clean
\family default
\series default
: Deletes the
\family typewriter
 <build\SpecialChar \-
dir>\SpecialChar \slash{}
build/*
\family default
 directories and removes all generated artifacts.
\end_layout

\begin_layout Standard
For
\family typewriter
 packaging
\family default
 (building) the source, call
\end_layout

\begin_layout LyX-Code
$ cd <build-dir>
\end_layout

\begin_layout LyX-Code
$ gradle packaging
\end_layout

\begin_layout Standard
or
\end_layout

\begin_layout LyX-Code
$ ./gradlew packaging
\end_layout

\begin_layout Standard
if you don't have the the Gradle build system installed---calling the the
 Gradle wrapper script will download all needed files and trigger the build
 task afterwards.
\end_layout

\begin_layout Paragraph
IDE integration
\end_layout

\begin_layout Standard
Gradle has tasks which creates the project file for Eclipse
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "http://www.eclipse.org/"
target "http://www.eclipse.org/"

\end_inset


\end_layout

\end_inset

 and IntelliJ IDEA
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "http://www.jetbrains.com/idea/"
target "http://www.jetbrains.com/idea/"

\end_inset


\end_layout

\end_inset

.
 Call
\end_layout

\begin_layout LyX-Code
$ ./gradlew <eclipse|idea>
\end_layout

\begin_layout Standard
for creating the project files for Eclipse or IntelliJ, respectively.
\end_layout

\begin_layout Paragraph
External library dependencies
\end_layout

\begin_layout Standard
The following external projects are used for running and/or building the
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 library.
\end_layout

\begin_layout Itemize

\series bold
\emph on
TestNG
\series default
\emph default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
TestNG
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
Version
\series default
:
\emph on
 6.8.8
\end_layout

\begin_layout Itemize

\series bold
Homepage
\series default
:
\emph on
 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://testng.org/doc/index.html
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\series bold
Download
\series default
:
\emph on
 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://testng.org/testng-6.8.8.zip
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\series bold
License
\series default
:
\emph on
 
\begin_inset CommandInset href
LatexCommand href
name "Apache License, Version 2.0"
target "http://testng.org/license"

\end_inset


\end_layout

\begin_layout Itemize

\series bold
Scope
\series default
:
\emph on
 test
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
\emph on
Apache Commons Math
\series default
\emph default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Apache Commons Math
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
Version
\series default
:
\emph on
 3.3
\end_layout

\begin_layout Itemize

\series bold
Homepage
\series default
:
\emph on
 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://commons.apache.org/proper/commons-math/
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\series bold
Download
\series default
: 
\emph on

\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://tweedo.com/mirror/apache/commons/math/binaries/commons-math3-3.3-bin.zip
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\series bold
License
\series default
:
\emph on
 
\begin_inset CommandInset href
LatexCommand href
name "Apache License, Version 2.0"
target "http://testng.org/license"

\end_inset


\end_layout

\begin_layout Itemize

\series bold
Scope
\series default
:
\emph on
 test
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
\emph on
Java2Html
\series default
\emph default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Java2Html
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
Version
\series default
:
\emph on
 5.0
\end_layout

\begin_layout Itemize

\series bold
Homepage
\series default
:
\emph on
 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.java2html.de/
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\series bold
Download
\series default
:
\emph on
 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.java2html.de/java2html_50.zip
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\series bold
License
\series default
:
\emph on
 
\begin_inset CommandInset href
LatexCommand href
name "GPL"
target "https://www.gnu.org/licenses/gpl.html"

\end_inset

 or 
\begin_inset CommandInset href
LatexCommand href
name "CPL1.0"
target "http://www.eclipse.org/legal/cpl-v10.html"

\end_inset


\end_layout

\begin_layout Itemize

\series bold
Scope
\series default
:
\emph on
javadoc
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
\emph on
Gradle
\series default
\emph default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Gradle
\end_layout

\end_inset


\series bold
\emph on

\begin_inset CommandInset label
LatexCommand label
name "Gradle"

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
Version
\series default
: 2.2 (
\emph on
or later
\emph default
)
\end_layout

\begin_layout Itemize

\series bold
Homepage
\series default
:
\emph on
 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://gradle.org/
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\series bold
Download
\series default
: 
\emph on

\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://services.gradle.org/distributions/gradle-2.2-bin.zip
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\series bold
License
\series default
:
\emph on
 
\begin_inset CommandInset href
LatexCommand href
name "Apache License, Version 2.0"
target "http://gradle.org/license"

\end_inset


\end_layout

\begin_layout Itemize

\series bold
Scope
\series default
:
\emph on
 build
\end_layout

\end_deeper
\begin_layout Paragraph
Maven Central
\end_layout

\begin_layout Standard
The whole Jenetics package can also be downloaded from the 
\emph on
Maven Central
\emph default
 repository:
\end_layout

\begin_layout LyX-Code
<dependency>     
\end_layout

\begin_layout LyX-Code
    <groupId>org.bitbucket.fwilhelm</groupId>
\end_layout

\begin_layout LyX-Code
    <artifactId>org.jenetics</artifactId>
\end_layout

\begin_layout LyX-Code
    <version>3.0.0</version>
\end_layout

\begin_layout LyX-Code
</dependency>
\end_layout

\begin_layout Section
License
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
License
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The library itself is licensed under the 
\begin_inset CommandInset href
LatexCommand href
name "Apache License, Version 2.0"
target "http://www.apache.org/licenses/LICENSE-2.0.html"

\end_inset

.
\end_layout

\begin_layout LyX-Code

\size footnotesize
Copyright @__year__@ Franz Wilhelmstötter
\begin_inset Newline newline
\end_inset

 
\end_layout

\begin_layout LyX-Code

\size footnotesize
Licensed under the Apache License, Version 2.0 (the "License");
\end_layout

\begin_layout LyX-Code

\size footnotesize
you may not use this file except in compliance with the License.
\end_layout

\begin_layout LyX-Code

\size footnotesize
You may obtain a copy of the License at
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code

\size footnotesize
   http://www.apache.org/licenses/LICENSE-2.0
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code

\size footnotesize
Unless required by applicable law or agreed to in writing, software
\end_layout

\begin_layout LyX-Code

\size footnotesize
distributed under the License is distributed on an "AS IS" BASIS,
\end_layout

\begin_layout LyX-Code

\size footnotesize
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
\end_layout

\begin_layout LyX-Code

\size footnotesize
See the License for the specific language governing permissions and
\end_layout

\begin_layout LyX-Code

\size footnotesize
limitations under the License.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "references"
options "bibtotoc,plain"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset index_print
LatexCommand printindex
type "idx"

\end_inset


\end_layout

\end_body
\end_document
