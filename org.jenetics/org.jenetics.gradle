/*
 * Java Genetic Algorithm Library (@__identifier__@).
 * Copyright (c) @__year__@ Franz Wilhelmstötter
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:
 *    Franz Wilhelmstötter (franz.wilhelmstoetter@gmx.at)
 */

import org.apache.tools.ant.filters.ReplaceTokens

import org.jenetics.gradle.task.ColorizerTask


/**
 * @author <a href="mailto:franz.wilhelmstoetter@gmx.at">Franz Wilhelmstötter</a>
 * @since 1.2
 * @version 1.4 &mdash; <em>$Date$</em>
 */

apply plugin: 'jacoco'
apply plugin: 'osgi'
apply plugin: 'eclipse'
apply plugin: 'idea'

apply from: "${rootDir}/gradle/commons.gradle"
apply from: "${rootDir}/gradle/packaging.gradle"
apply from: "${rootDir}/gradle/xlint.gradle"


jar {
	manifest {
		version = version
		symbolicName = project.name
		name = project.name
		instruction 'Export-Package',
					'org.jenetics',
					'org.jenetics.util',
					'org.jenetics.stat'
		instruction 'Bundle-Vendor', jenetics.author
		instruction 'Bundle-Description', jenetics.description
		instruction 'Bundle-DocURL', jenetics.url

		attributes 'Implementation-Title': project.name,
					'Implementation-Version': version,
					'Implementation-URL': jenetics.url,
					'Implementation-Vendor': jenetics.name,
					'ProjectName': jenetics.name,
					'Version': version,
					'Maintainer': jenetics.author
	}
}

task jarjar(type: Jar, dependsOn: build) {
	baseName = "${project.name}-all"
	from files(sourceSets.main.output.classesDir)
	from {
		configurations.compile.collect {
			it.isDirectory() ? it : zipTree(it)
		}
	}

	manifest {
		attributes 'Implementation-Title': "${project.name}-all",
					'Implementation-Versionv': version,
					'Implementation-URL': jenetics.url,
					'Implementation-Vendor': jenetics.name,
					'ProjectName': jenetics.name,
					'Version': version,
					'Maintainer': jenetics.author
	}
}

javadoc {
	configure(options) {
		memberLevel = 'PROTECTED'
		version = true
		author = true
		docEncoding = 'UTF-8'
		charSet = 'UTF-8'
		linkSource = true
		links = [
			'http://download.oracle.com/javase/7/docs/api/',
			'http://jscience.org/api/',
			'http://javolution.org/target/site/apidocs/'
		]
		windowTitle = "Jenetics ${project.version}"
		docTitle = "<h1>Jenetics ${project.version}</h1>"
		bottom = "&copy; ${copyrightYear} Franz Wilhelmst&ouml;tter  &nbsp;<i>(${dateformat.format(now.time)})</i>"
		stylesheetFile = file("${rootDir}/buildSrc/resources/javadoc/stylesheet.css")
		
		exclude 'org/jenetics/internal/**'
		
		//options.addStringOption('-subpackages', 'org.jenetics')
		//options.addStringOption('-exclude', 'org.jenetics.internal.util')
		
		//group('Core API', ['org.jenetics']).
		//group('Utilities', ['org.jenetics.util', 'org.jenetics.stat'])
	}
}

task colorize(type: ColorizerTask) {
	directory = file(javadoc.destinationDir.path)
}

task java2html {
	def destination = javadoc.destinationDir.path
	doLast {
		javaexec {
			main = 'de.java2html.Java2Html'
			args = [
				'-srcdir', 'src/main/java',
				'-targetdir', "${destination}/src-html"
			]
			classpath = files("${rootDir}/buildSrc/lib/java2html.jar")
		}
		copy {
			from 'src/main/java/org/jenetics/doc-files'
			into "${destination}/org/jenetics/doc-files"
		}
		copy {
			from 'src/main/java/org/jenetics/stat/doc-files'
			into "${destination}/org/jenetics/stat/doc-files"
		}
		copy {
			from 'src/main/java/org/jenetics/util/doc-files'
			into "${destination}/org/jenetics/util/doc-files"
		}
	}
}

javadoc.finalizedBy([colorize, java2html])

test {
	useTestNG {
		//parallel = 'tests' // 'methods'
		//threadCount = Runtime.runtime.availableProcessors() + 1
		//include '**/*Test.class'
		suites 'src/test/resources/testng.xml'
	}
}

jacocoTestReport{
	reports {
		xml.enabled true
		csv.enabled true
	}
}

packaging.dependsOn([jarjar, javadoc, jacocoTestReport])
packaging << {
	// Copy the javadoc
	copy {
		from("${buildDir}/docs/javadoc") {
			include '**/*.html'
		}
		into exportJavadocDir
		filter(ReplaceTokens, tokens: [
			__identifier__: identifier,
			__year__: copyrightYear
		])
	}
	copy {
		from("${buildDir}/docs/javadoc") {
			exclude '**/*.html'
		}
		into exportJavadocDir
	}

	// Copy the test-report.
	copy {
		from("${buildDir}/reports") {
			include 'tests/**'
			include 'jacoco/**'
			include '*.gradle'
			exclude '.gradle'
		}
		into exportReportDir
	}
}

dependencies {
	//testCompile(Include.Javolution) { transitive = false }
	compile Include.JScience
	testCompile Include.TestNG
}


